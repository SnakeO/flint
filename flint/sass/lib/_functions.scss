// Checks if item is map
//----------------------------------------------------------------------

@function is-map($n) {
	@if type-of($n) == "map" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is list
//----------------------------------------------------------------------

@function is-list($n) {
	@if type-of($n) == "list" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is number
//----------------------------------------------------------------------

@function is-number($n) {
	@if type-of($n) == "number" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is string
//----------------------------------------------------------------------

@function is-string($n) {
	@if type-of($n) == "string" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is not string
//----------------------------------------------------------------------

@function is-not-string($n) {
	@if type-of($n) != "string" {
		@return true;
	} @else {
		@return false;
	}
}

// fetch value from key in map
//----------------------------------------------------------------------

@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);

	// check if value equals NULL
	// return message so that sass still compiles without errors

	@if $value == NULL {
		@return "Oops! Something went wrong. Good thing SASS still compiles so that you can debug this."
	}

	@else {
		@if $length > 1 {
			$rest: ();

			@for $i from 2 through $length {
				$rest: append($rest, nth($keys, $i))
			} 

			@return map-fetch($value, $rest);
			
		} @else {
			@return $value;
		}
	}
}

// get single value from key in map
//----------------------------------------------------------------------

@function get-value($i, $n: NULL) {
	@if $n == NULL {
		@return map-fetch($flint, config $i);
	} @else {
		@return map-fetch($flint, config $i $n);
	}
}

// gets each breakpoint's key
//----------------------------------------------------------------------

@function get-all-keys() {
	$all-keys: ();
  
	@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
		$key: steal-key($i);
		$all-keys: append($all-keys, $key, 'comma');
	}

	@return $all-keys;
}

// steal key based on index number
//----------------------------------------------------------------------

@function steal-key($index) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index) {
			@return $key;
		}
	}
}

// check if key exists in map
//----------------------------------------------------------------------

@function exists($map, $value){
	@if is-map($map) {
		@if map-has-key($map, $value) {
			@return true;
		}
		@each $key, $i in $map {
			@if exists($i, $value) {
				@return true;
			}
		}
	} @return false;
}

// convert fixed to fluid width
//----------------------------------------------------------------------

@function fluid-width($target, $context) {
	@return ($target / $context) * 100%;
}

// calculate width
//----------------------------------------------------------------------

@function calc-width($key, $span, $context: NULL) {
	@if get-value(settings, grid) == "fluid" {
		@if $key == "container" or $span == "container" {
			@return fluid-width(get-value($key, breakpoint), get-value($key, breakpoint));
		} @else if $context == NULL {
			@return fluid-width((get-value($key, breakpoint) / get-value($key, columns) * $span), get-value($key, breakpoint));
		} @else {
			@return fluid-width((get-value($key, breakpoint) / get-value($key, columns) * $span), ((get-value($key, breakpoint) / get-value($key, columns) * $context)));
		}
	} @if get-value(settings, grid) == "fixed" {
		@if $key == "container" or $span == "container" {
			@return get-value($key, breakpoint);
		} @else if $context == NULL {
			@return get-value($key, breakpoint) / get-value($key, columns) * $span;
		} @else {
			@return get-value($key, breakpoint) / get-value($key, columns) * $span;
		}
	} @else {
		@return false;
	}
}

// calculate margin
//----------------------------------------------------------------------

@function calc-margin($key, $span, $context: NULL) {
	@if get-value(settings, grid) == "fluid" {
		@if $key == "container" or $span == "container" {
			@return 0;
		} @else if $context == NULL {
			@return fluid-width(get-value(settings, gutter), get-value($key, breakpoint));
		} @else {
			@return fluid-width(get-value(settings, gutter), ((get-value($key, breakpoint) / get-value($key, columns) * $context)));
		}
	} @if get-value(settings, grid) == "fixed" {
		@if $key == "container" or $span == "container" {
			@return 0;
		} @if $context == NULL {
			@return get-value(settings, gutter);
		} @else {
			@return get-value(settings, gutter);
		}
	} @else {
		@return false;
	}
}

// calculate from-to breakpoints
//----------------------------------------------------------------------

@function calc-breakpoint($n, $key, $i) {
	@if get-value(settings, grid) == "fluid" {
		@if $n == "from" {
			@if $i == (length(map-fetch($flint, config)) - 1) {
				@return 0;
			} @else {
				@return (get-value(next-index($i), breakpoint) + 1);
			}
		} @else if $n == "to" {
			@return get-value($key, breakpoint);
		}
	} @else if get-value(settings, grid) == "fixed" {
		@if $n == "from" {
			@if $i == (length(map-fetch($flint, config)) - 1) {
				@return 0;
			} @else {
				@return get-value($key, breakpoint);
			}
		} @else if $n == "to" {
		  	@if steal-key($i) != steal-key(1) {
			 	@return (get-value(steal-key(($i - 1)), breakpoint) - 1);
		 	 } @else {
		    	@return (get-value(steal-key($i), breakpoint) - 1);
	    	}
		}
	}
}

// steal value based on index number
//----------------------------------------------------------------------

@function steal-values($index, $value) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index) {
			@return get-value($key, $value);
		}
	}
}

// gets the index of the passed key
//----------------------------------------------------------------------

@function get-index($key) {
  	@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
		@if steal-key($i) == $key {
			@return $i;
		}
	}
}

// returns next indexed key based on passed number
//----------------------------------------------------------------------

@function next-index($index) {
	@if $index != length($flint__function__all--keys) {
		@each $key in nth(map-get($flint, config), $index + 1) {
			@return $key;
		}
	} @else {
		@return NULL;
	}
}

// gets all breakpoints
//----------------------------------------------------------------------

@function get-all-breakpoints() {
	$all-breakpoints: ();

	@each $map, $keys in map-get($flint, config) {
		@each $key, $value in $keys {
			@if $key == "breakpoint" {
				$all-breakpoints: append($all-breakpoints, $value, 'comma');
			}
		}
	} @return $all-breakpoints;
}

// grabs highest breakpoint
//----------------------------------------------------------------------

@function is-highest-breakpoint($key) {
	@if get-value($key, breakpoint) == max(get-all-breakpoints()...) {
		@return true;
	} @else {
		@return false;
	}
}

// gets all breakpoint column values
//----------------------------------------------------------------------

@function get-all-columns() {
	$all-columns: ();

	@each $map, $keys in map-get($flint, config) {
		@each $key, $value in $keys {
			@if $key == "columns" {
				$all-columns: append($all-columns, $value, 'comma');
			}
		}
	} @return $all-columns;
}

// keeps count of all instances with arguments, stores in global var
//----------------------------------------------------------------------

@function instance($key, $span, $context, $gutter, $shift, $outputWidth, $outputMarginRight, $outputMarginLeft) {
    $instance-count: $instance-count + 1 !global;

    $flint__instance: (
		"#{selector_string()}::#{$key}": (
			"instance-count": #{$instance-count},
			"key": #{$key},
			"breakpoint": #{get-value($key, breakpoint)},
			"columns": #{get-value($key, columns)},
			"span": #{$span},
			"context": #{$context},
			"gutter": #{$gutter},
			"shift": #{$shift},
			"outputted": (
				"width": #{$outputWidth},
				"margin-right": #{$outputMarginRight},
				"margin-left": #{$outputMarginLeft},
			),
		),
    );
    
    @return map-merge($flint__instances, $flint__instance);
}

@function string-to-list($string) {
	@if is-string($string) {
		$string-list: ();
		$space-indexes: ();
		$find: " ";
		$length: str-length($string);
		// Find all spaces and their indices by looking over each character in string
		@for $i from 1 through $length {
			$slice: str-slice($string, $i, $i);
			@if $slice == $find {
				$space-indexes: append($space-indexes, $i, "comma");
			}
		}
		// Keep a count of number of spaces
		$count: 1;
		// Loop through each space
		@each $space in $space-indexes {
			// If is initial count, grab first substring and store in list
			@if $count == 1 {
				$matched-string: str-slice($string, 0, ($space - 1));
				$string-list: append($string-list, $matched-string, "comma");
			// Else, add a little math to make up for the spaces to do that same
			} @else {
				$matched-string: str-slice($string, (nth($space-indexes, ($count - 1)) + 1), ($space - 1));
				$string-list: append($string-list, $matched-string, "comma");
			}
			// Increase count
			$count: $count + 1;
		}
		// Now grab that last selector
		$last-space: nth($space-indexes, length($space-indexes));
		$matched-string: str-slice($string, ($last-space + 1), $length);
		$string-list: append($string-list, $matched-string, "comma");
		// Finally, return comma separated list of selectors
		@return $string-list;
	} @else {
		@return "You did not input a valid string: #{$string}";
	}
}

@function get-substring($full-string, $depth) {
	$get-substring: string-to-list($full-string);
	@if $depth == "last" {
		@return nth($get-substring, length($get-substring));
	} @else if $depth == "first" {
		@return nth($get-substring, 1);
	} @else {
		@return nth($get-substring, $depth);
	}
}

@function instance-property-exists($property, $key) {
	$parent: "#{get-substring(selector_string(), first)}::#{$key}";
	@if exists($flint__instances, $parent) {
		@return true;
	} @else {
		@return false;
	}
}