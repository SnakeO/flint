// Checks if item is map
//--------------------------------------------------------------------------------
// @param $n [Value] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-map($n) {
	@if type-of($n) == "map" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is list
//--------------------------------------------------------------------------------
// @param $n [Value] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-list($n) {
	@if type-of($n) == "list" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is number
//--------------------------------------------------------------------------------
// @param $n [Value] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-number($n) {
	@if type-of($n) == "number" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is string
//--------------------------------------------------------------------------------
// @param $n [Value] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-string($n) {
	@if type-of($n) == "string" {
		@return true;
	} @else {
		@return false;
	}
}

// Checks if item is not string
//--------------------------------------------------------------------------------
// @param $n [Value] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-not-string($n) {
	@if type-of($n) != "string" {
		@return true;
	} @else {
		@return false;
	}
}

// Fetch value from key in map
// -------------------------------------------------------------------------------
// @dependence `map-fetche()`
// -------------------------------------------------------------------------------
// @param $i [Map] : map
// @param $n [Keys...] : keys
// -------------------------------------------------------------------------------
// @return [Value] | false

@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);

	// check if value equals NULL (meaning the @param was incorrect)
	// return false so that sass still compiles without errors

	@if $value == NULL {
		@return false;
	}

	@else {
		@if $length > 1 {
			$rest: ();

			@for $i from 2 through $length {
				$rest: append($rest, nth($keys, $i))
			} 

			@return map-fetch($value, $rest);
			
		} @else {
			@return $value;
		}
	}
}

// Get single value from key in instance map based on $selector::$key
// -------------------------------------------------------------------------------
// @dependence `map-fetch()`
// -------------------------------------------------------------------------------
// @param $key [Value] : breakpoint key
// @param $value [Value] : fetch value
// -------------------------------------------------------------------------------
// @return [Value]

@function get-value($key, $value: NULL) {
	@if $value == NULL {
		@return map-fetch($flint, config $key);
	} @else {
		@return map-fetch($flint, config $key $value);
	}
}

// Gets each breakpoint's key
// -------------------------------------------------------------------------------
// @return [List]

@function get-all-keys() {
	$all-keys: ();
  
	@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
		$key: steal-key($i);
		$all-keys: append($all-keys, $key, 'comma');
	}

	@return $all-keys;
}

// Cteal key based on index number
//--------------------------------------------------------------------------------
// @param $index [Integer] : index of key
// -------------------------------------------------------------------------------
// @return [Breakpoint]

@function steal-key($index) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index) {
			@return $key;
		}
	}
}

// Check if key exists in map
//--------------------------------------------------------------------------------
// @param $map [Map] : map that contains $value
// @param $value [Map] : key to search for
// -------------------------------------------------------------------------------
// @return [Boolean]

@function exists($map, $value){
	@if is-map($map) {
		@if map-has-key($map, $value) {
			@return true;
		}
		@each $key, $i in $map {
			@if exists($i, $value) {
				@return true;
			}
		}
	} @return false;
}

// Convert fixed to fluid width
//--------------------------------------------------------------------------------
// @param $target [Value] : target
// @param $context [Value] : context
// -------------------------------------------------------------------------------
// @return [Value]

@function fluid-width($target, $context) {
	@return ($target / $context) * 100%;
}

// Calculate width
// -------------------------------------------------------------------------------
// @dependence `get-value()`
// @dependence `fluid-width()`
// -------------------------------------------------------------------------------
// @param $key [Breakpoint | "container"] : how to calculate value 
// @param $span [Value] : span
// @param $context [Value] : if context is needed
// -------------------------------------------------------------------------------
// @return [Value] | false

@function calc-width($key, $span, $context: NULL) {
	@if get-value(settings, grid) == "fluid" {
		@if $key == "container" or $span == "container" {
			@return fluid-width(get-value($key, breakpoint), get-value($key, breakpoint));
		} @else if $context == NULL {
			@return fluid-width((get-value($key, breakpoint) / get-value($key, columns) * $span), get-value($key, breakpoint));
		} @else {
			@return fluid-width((get-value($key, breakpoint) / get-value($key, columns) * $span), ((get-value($key, breakpoint) / get-value($key, columns) * $context)));
		}
	} @if get-value(settings, grid) == "fixed" {
		@if $key == "container" or $span == "container" {
			@return get-value($key, breakpoint);
		} @else if $context == NULL {
			@return get-value($key, breakpoint) / get-value($key, columns) * $span;
		} @else {
			@return get-value($key, breakpoint) / get-value($key, columns) * $span;
		}
	} @else {
		@return false;
	}
}

// Calculate margin
// -------------------------------------------------------------------------------
// @dependence `get-value()`
// @dependence `fluid-width()`
// -------------------------------------------------------------------------------
// @param $key [Breakpoint | "container"] : how to calculate value 
// @param $span [Value] : span
// @param $context [Value] : if context is needed
// -------------------------------------------------------------------------------
// @return [Value] | false

@function calc-margin($key, $span, $context: NULL) {
	@if get-value(settings, grid) == "fluid" {
		@if $key == "container" or $span == "container" {
			@return 0;
		} @else if $context == NULL {
			@return fluid-width(get-value(settings, gutter), get-value($key, breakpoint));
		} @else {
			@return fluid-width(get-value(settings, gutter), ((get-value($key, breakpoint) / get-value($key, columns) * $context)));
		}
	} @if get-value(settings, grid) == "fixed" {
		@if $key == "container" or $span == "container" {
			@return 0;
		} @if $context == NULL {
			@return get-value(settings, gutter);
		} @else {
			@return get-value(settings, gutter);
		}
	} @else {
		@return false;
	}
}

// Calculate from-to breakpoints
// -------------------------------------------------------------------------------
// @dependence `map-fetch()`
// @dependence `get-value()`
// -------------------------------------------------------------------------------
// @param $n ["from | "to"] : how to calculate breakpoint 
// @param $key [Value] : key of breakpoint
// @param $i [Value] : index of current breakpoint
// -------------------------------------------------------------------------------
// @return [Value]

@function calc-breakpoint($n, $key, $i) {
	@if get-value(settings, grid) == "fluid" {
		@if $n == "from" {
			@if $i == (length(map-fetch($flint, config)) - 1) {
				@return 0;
			} @else {
				@return (get-value(next-index($i), breakpoint) + 1);
			}
		} @else if $n == "to" {
			@return get-value($key, breakpoint);
		}
	} @else if get-value(settings, grid) == "fixed" {
		@if $n == "from" {
			@if $i == (length(map-fetch($flint, config)) - 1) {
				@return 0;
			} @else {
				@return get-value($key, breakpoint);
			}
		} @else if $n == "to" {
		  	@if steal-key($i) != steal-key(1) {
			 	@return (get-value(steal-key(($i - 1)), breakpoint) - 1);
		 	 } @else {
		    	@return (get-value(steal-key($i), breakpoint) - 1);
	    	}
		}
	}
}

// Steal value based on index number
// -------------------------------------------------------------------------------
// @dependence `map-fetch()`
// @dependence `get-value()`
// -------------------------------------------------------------------------------
// @param $index [Value] : index of breakpoint key in config
// @param $value [Value] : value
// -------------------------------------------------------------------------------
// @return [Value]

@function steal-values($index, $value) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index) {
			@return get-value($key, $value);
		}
	}
}

// Gets the index of the passed key
// -------------------------------------------------------------------------------
// @dependence `steal-key()`
// -------------------------------------------------------------------------------
// @param $key [Breakpoint] : breakpoint key
// -------------------------------------------------------------------------------
// @return [Value]

@function get-index($key) {
  	@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
		@if steal-key($i) == $key {
			@return $i;
		}
	}
}

// Returns next indexed key based on passed number
// -------------------------------------------------------------------------------
// @param $index [Value] : index
// -------------------------------------------------------------------------------
// @return [Key] | NULL

@function next-index($index) { 
	@if $index != (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index + 1) {
			@return $key;
		}
	} @else {
		@return NULL;
	}
}

// Gets all breakpoints
// -------------------------------------------------------------------------------
// @return [List]

@function get-all-breakpoints() {
	$all-breakpoints: ();

	@each $map, $keys in map-get($flint, config) {
		@each $key, $value in $keys {
			@if $key == "breakpoint" {
				$all-breakpoints: append($all-breakpoints, $value, 'comma');
			}
		}
	} 

	@return $all-breakpoints;
}

// Grabs highest breakpoint
// -------------------------------------------------------------------------------
// @dependence `get-value()`
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-highest-breakpoint($key) {
	@if get-value($key, breakpoint) == max(get-all-breakpoints()...) {
		@return true;
	} @else {
		@return false;
	}
}

// Gets all breakpoint column values
// -------------------------------------------------------------------------------
// @return [List]

@function get-all-columns() {
	$all-columns: ();

	@each $map, $keys in map-get($flint, config) {
		@each $key, $value in $keys {
			@if $key == "columns" {
				$all-columns: append($all-columns, $value, 'comma');
			}
		}
	} @return $all-columns;
}

// Keeps count of all instances with arguments, stores in global var
// -------------------------------------------------------------------------------
// @dependence `get-value()`
// -------------------------------------------------------------------------------
// @param $key [Breakpoint] : computed breakpoint of instance
// @param $span [Value] : computed span of instance
// @param $context [Value] : computed context of instance
// @param $gutter [Value] : computed gutter of instance
// @param $shift [Value] : computed shift of instance
// @param $outputWidth [Value] : computed width of instance
// @param $outputMarginRight [Value] : computed right margin of instance
// @param $outputMarginLeft [Value] : computed left margin of instance
// -------------------------------------------------------------------------------
// @return [Value] | map

@function instance($key, $span, $context, $gutter, $shift, $outputWidth, $outputMarginRight, $outputMarginLeft) {
    $instance-count: $instance-count + 1 !global;

    $flint__instance: (
		"#{selector_string()}::#{$key}": (
			"instance-count": #{$instance-count},
			"key": #{$key},
			"breakpoint": #{get-value($key, breakpoint)},
			"columns": #{get-value($key, columns)},
			"span": #{$span},
			"context": #{$context},
			"gutter": #{$gutter},
			"shift": #{$shift},
			"outputted": (
				"width": #{$outputWidth},
				"margin-right": #{$outputMarginRight},
				"margin-left": #{$outputMarginLeft},
			),
		),
    );
    
    @return map-merge($flint__instances, $flint__instance);
}

// Turns string into a flat list
// -------------------------------------------------------------------------------
// @param $string [String] : string
// -------------------------------------------------------------------------------
// @return [List] | error

@function string-to-list($string) {
	@if is-string($string) {
		$string-list: ();
		$space-indexes: ();
		$find: " ";
		$length: str-length($string);
		// Find all spaces and their indices by looking over each character in string
		@for $i from 1 through $length {
			$slice: str-slice($string, $i, $i);
			@if $slice == $find {
				$space-indexes: append($space-indexes, $i, "comma");
			}
		}
		@if length($space-indexes) >= 1 {
			// Keep a count of number of spaces
			$count: 1;
			// Loop through each space
			@each $space in $space-indexes {
				// If is initial count, grab first substring and store in list
				@if $count == 1 {
					$matched-string: str-slice($string, 0, ($space - 1));
					$string-list: append($string-list, $matched-string, "comma");
				// Else, add a little math to make up for the spaces to do the same
				} @else {
					$matched-string: str-slice($string, (nth($space-indexes, ($count - 1)) + 1), ($space - 1));
					$string-list: append($string-list, $matched-string, "comma");
				}
				// Increase count
				$count: $count + 1;
			}
			// Now grab that last selector
			$last-space: nth($space-indexes, length($space-indexes));
			$matched-string: str-slice($string, ($last-space + 1), $length);
			$string-list: append($string-list, $matched-string, "comma");
			// Finally, return comma separated list of selectors
			@return $string-list;
		} @else {
			@return false;
		}
	} @else {
		@return "You did not input a valid string: #{$string}";
	}
}

// Gets substring from string
// -------------------------------------------------------------------------------
// @dependence `string-to-list()`
// -------------------------------------------------------------------------------
// @param $full-string [String] : string that contains substring
// @param $depth [Integer | "last | "first"] : depth of substring
// -------------------------------------------------------------------------------
// @return [String]

@function get-substring($full-string, $depth) {
	@if is-string($full-string) {
		$get-substring: string-to-list($full-string);

		@if $depth == "last" {
			@return nth($get-substring, length($get-substring));
		} @else if $depth == "first" {
			@return nth($get-substring, 1);
		} @else {
			@return nth($get-substring, $depth);
		}
	} @else {
		@return "You did not input a valid string: #{$full-string}";
	}
}

// Get last item in list
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [List]

@function last($list) {
	@return nth($list, length($list));
}

// Joins all elements of $list with $glue
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#to-string
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $glue [String] : value to use as a join string
// -------------------------------------------------------------------------------
// @return [String]

@function list-to-string($list, $glue: "", $is-nested: false) {
	$result: null;
	$length: length($list);

	@for $i from 1 through $length {
		$n: nth($list, $i);

		@if is-list($n) {
			$result: $result#{list-to-string($n, $glue, true)};
		} @else {
			$result: if($i != length($list) or $is-nested, $result#{$n}#{$glue}, $result#{$n});
		}
	}

	@return $result;
}

// Returns truthiness of a value
// -------------------------------------------------------------------------------
// @param $value [Literal] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-true($value) {
	@return if($value == null, false, $value and $value != null and $value != "" and $value != ());
}

// Removes all false and null values from $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation.html#purge
// -------------------------------------------------------------------------------
// @dependence `is-true()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [List]

@function purge($list) {
	$result: ();

	@each $item in $list {
		@if is-true($item) {
			$result: append($result, $item, list-separator($list));
		}
	}

	@return $result;
}

// Replaces $old by $new in $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation.html#replace
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $old [Literal] : value to replace
// @param $value [Literal] : new value for $old
// -------------------------------------------------------------------------------
// @return [List]

@function replace($list, $old, $value) {
  $running: true;

	@while $running {
		$index: index($list, $old);

		@if not $index {
			$running: false;
		} @else {
			$list: set-nth($list, $index, $value);
		}
	}

	@return if(not is-true($value), purge($list), $list);
}

// Removes value(s) $value from $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#remove
// -------------------------------------------------------------------------------
// @dependence `replace()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $value [Literal] : value to remove
// @param $recursive [Boolean] : enable / disable recursivity
// -------------------------------------------------------------------------------
// @return [List]

@function remove($list, $value) {
	@return replace($list, $value, null);
}

// Checks if instance exists in selector familiy tree, falls back from current selector
// -------------------------------------------------------------------------------
// @dependence `selector_string()`
// @dependence `string-to-list()`
// @dependence `list-to-string()`
// @dependence `get-value()`
// @dependence `exists()`
// @dependence `remove()`
// -------------------------------------------------------------------------------
// @param $key [Breakpoint] : breakpoint key to search for matching instance
// -------------------------------------------------------------------------------
// @return [Selectors] | false

@function family-instance-exists($key: get-value(settings, default)) {
	$selector-string: selector_string();
	$selector-list: string-to-list($selector-string);
	$length: length($selector-list);

	// Loop through length of list of selectors
	@for $i from 1 through $length {
		// Make sure that we're not counting the current selector string
		@if exists($flint__instances, "#{list-to-string($selector-list, " ")}::#{$key}") and $selector-string != list-to-string($selector-list, " ") {
			// If true, return the maching instance key
			@return "#{list-to-string($selector-list, " ")}::#{$key}";
		} @else {
			// Else, remove the last selector and loop again
			$selector-list: remove($selector-list, last($selector-list));
		}
	}

	@return false;
}

// Get single value from key in instance map based on $selector::$key
// -------------------------------------------------------------------------------
// @dependence `map-fetch()`
// -------------------------------------------------------------------------------
// @warning : all [Values] @returned are strings and must be converted with `to-number()`
// -------------------------------------------------------------------------------
// @param $key [Breakpoint] : key
// @param $value [Value] : value
// @param $deep [Value] : fetch deep value
// -------------------------------------------------------------------------------
// @return [Value]

@function get-instance-value($key, $value, $deep: NULL) {
	@if $deep == NULL {
		@return map-fetch($flint__instances, family-instance-exists($key) $value);
	} @else {
		@return map-fetch($flint__instances, family-instance-exists($key) $value $deep);
	}
}

// Converts number[unit] string into value
// -------------------------------------------------------------------------------
// @documentation http://hugogiraudel.com/2014/01/15/sass-string-to-number/
// -------------------------------------------------------------------------------
// @param $number [Value] : number
// @param $unit [Value] : unit
// -------------------------------------------------------------------------------
// @return [Value]

@function num-length($number, $unit) {
	$strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
	$units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
	$index: index($strings, $unit);

	@if not $index {
		@warn "Unknown unit `#{$unit}`.";
		@return false;
	}

	@return $number * nth($units, $index);
}

// Converts number to string
// -------------------------------------------------------------------------------
// @documentation http://hugogiraudel.com/2014/01/15/sass-string-to-number/
// -------------------------------------------------------------------------------
// @dependence `num-length()`
// -------------------------------------------------------------------------------
// @param $string [String] : string
// -------------------------------------------------------------------------------
// @return [Value]

@function to-number($string) {
	// Matrices
	$strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
	$numbers:  0   1   2   3   4   5   6   7   8   9;

	// Result
	$result: 0;
	$divider: 0;
	$minus: false;

	// Looping through all characters
	@for $i from 1 through str-length($string) {
		$character: str-slice($string, $i, $i);
		$index: index($strings, $character);

		@if $character == '-' {
			$minus: true;
		} @else if $character == '.' {
			$divider: 1;
		} @else {

			@if not $index {
				$result: if($minus, $result * -1, $result);
				@return num-length($result, str-slice($string, $i));
			}

			$number: nth($numbers, $index);

			@if $divider == 0 {
				$result: $result * 10;
			} @else {
				// Move the decimal dot to the left
				$divider: $divider * 10;
				$number: $number / $divider;
			}

			$result: $result + $number;
		}
	}
	
	@return if($minus, $result * -1, $result);
}