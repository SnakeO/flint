/** -------------------------------------------------------------------- //
*
* @Flint 
* @By Ezekiel Gabrielse
* @Web ezekielg.com
* @Sass v3.3.0.rc.6
* @Compass v1.0.0.alpha.18
*
// -------------------------------------------------------------------- **/



//----------------------------------------------------------------------
// TO DO
//----------------------------------------------------------------------
//
// set up debug-mode to spit out all values -- i.e. "desktop-span: 3 of 6", "gutter-style: normal", etc.
// set up build-mode to automate process of setting up color variables and typography
// if span is 0, display: none --
// map-merge config with seperate custom config called in from outside stylesheet
// package up framework
// try to break framework -- test, test, test
// branding & website design
// theme names: hammer stone (vintage, woodlands), pyrite (geometrical), tinder (woodlands)
//
//----------------------------------------------------------------------



$flint: (

	// grid configuration

	"config": (

		// define breakpoints

		"desktop": (
			"columns": 16,
			"breakpoint": 1280px,
		),
		"laptop": (
			"columns": 12,
			"breakpoint": 960px,
		),
		"tablet": (
			"columns": 8,
			"breakpoint": 640px,
		),
		"mobile": (
			"columns": 4,
			"breakpoint": 320px,
		),

		// additional grid settings

		"settings": (
			"default": "desktop",
			"grid": "fluid",
			"gutter": 10px,
			"max-width": false,
			"float-style": "left",
			"border-box-sizing": true,
			"debug-mode": true,
		),
	),
);

//----------------------------------------------------------------------
//
// Utility functions
//
//----------------------------------------------------------------------

// fetch value from key in map
//----------------------------------------------------------------------

@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);

	// check if value equals null
	// return message so that sass still compiles without errors

	@if $value == null { @return "Oops! Something went wrong. Good thing SASS still compiles so that you can debug this." }

	@else {
		@if ($length > 1) {
			$rest: ();

			@for $i from 2 through $length {
				$rest: append($rest, nth($keys, $i))
			} @return map-fetch($value, $rest);

		} @else {
			@return $value;
		}
	}
}

// get single value from key in map
//----------------------------------------------------------------------

@function get-value($i, $n: null) {
	@if $n == null {
		@return map-fetch($flint, config $i);
	} @else {
		@return map-fetch($flint, config $i $n);
	}
}

// check if key exists in map
//----------------------------------------------------------------------

@function exists($map, $value){
	@if type-of($map) == map {
		@if map-has-key($map, $value) {
			@return true;
		}
		@each $key, $i in $map {
			@if exists($i, $value) {
				@return true;
			}
		}
	} @return false;
}

// convert fixed to fluid width
//----------------------------------------------------------------------

@function fluid-width($target, $context) {
	@return ($target / $context) * 100%;
}

// calculate width
//----------------------------------------------------------------------

@function calc-width($key, $span, $context: null) {
	@if get-value(settings, grid) == "fluid" {
		@if $key == "container" or $span == "container" {
			@return fluid-width(get-value($key, breakpoint), get-value($key, breakpoint));
		} @else if $context == null {
			@return fluid-width((get-value($key, breakpoint) / get-value($key, columns) * $span), get-value($key, breakpoint));
		} @else {
			@return fluid-width((get-value($key, breakpoint) / get-value($key, columns) * $span), ((get-value($key, breakpoint) / get-value($key, columns) * $context)));
		}
	} @if get-value(settings, grid) == "fixed" {
		@if $key == "container" or $span == "container" {
			@return get-value($key, breakpoint);
		} @else if $context == null {
			@return get-value($key, breakpoint) / get-value($key, columns) * $span;
		} @else {
			@return get-value($key, breakpoint) / get-value($key, columns) * $span;
		}
	} @else {
		@return false;
	}
}

// calculate margin
//----------------------------------------------------------------------

@function calc-margin($key, $span, $context: null) {
	@if get-value(settings, grid) == "fluid" {
		@if $key == "container" or $span == "container" {
			@return 0;
		} @else if $context == null {
			@return fluid-width(get-value(settings, gutter), get-value($key, breakpoint));
		} @else {
			@return fluid-width(get-value(settings, gutter), ((get-value($key, breakpoint) / get-value($key, columns) * $context)));
		}
	} @if get-value(settings, grid) == "fixed" {
		@if $key == "container" or $span == "container" {
			@return 0;
		} @if $context == null {
			@return get-value(settings, gutter);
		} @else {
			@return get-value(settings, gutter);
		}
	} @else {
		@return false;
	}
}

// calculate from-to breakpoints
//----------------------------------------------------------------------

@function calc-breakpoint($n, $key, $i) {
	@if $n == "from" {
		@if $i == (length(map-fetch($flint, config)) - 1) {
			@return 0;
		} @else {
			@return (get-value(next-index($i), breakpoint) + 1);
		}
	} @else if $n == "to" {
		@return get-value($key, breakpoint);
	} @else {
		@return "Unrecognized argument '#{$n}, #{$key}, #{$i}' was passed.";
	}
}

// steal key based on index number
//----------------------------------------------------------------------

@function steal-key($index) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index) {
			@return $key;
		}
	}
}

// steal value based on index number
//----------------------------------------------------------------------

@function steal-values($index, $value) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index) {
			@return get-value($key, $value);
		}
	}
}

// gets the index of the passed key
//----------------------------------------------------------------------

@function get-index($key) {
  	@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
		@if steal-key($i) == $key {
			@return $i;
		}
	}
}

// returns next indexed key based on passed number
//----------------------------------------------------------------------

@function next-index($index) {
	@for $n from 1 through (length(map-fetch($flint, config)) - 1) {
		@each $key in nth(map-get($flint, config), $index + 1) {
			@return $key;
		}
	}
}

// gets all breakpoints
//----------------------------------------------------------------------

@function get-all-breakpoints() {
	$all-breakpoints: ();

	@each $map, $keys in map-get($flint, config) {
		@each $key, $value in $keys {
			@if $key == "breakpoint" {
				$all-breakpoints: append($all-breakpoints, $value, 'comma');
			}
		}
	} @return $all-breakpoints;
}

// grabs highest breakpoint
//----------------------------------------------------------------------

@function is-highest-breakpoint($key) {
	@if get-value($key, breakpoint) == max(get-all-breakpoints()...) {
		@return true;
	} @else {
		@return false;
	}
}

// get single value from key in build map
//----------------------------------------------------------------------

@function build-get-value($i, $n: null) {
	@if $n == null {
		@return map-fetch($flint, build $i);
	} @else {
		@return map-fetch($flint, build $i $n);
	}
}

//----------------------------------------------------------------------
//
// Global variables
//
//----------------------------------------------------------------------

// set global variable to check if foundation has been applied globally
	
$foundation: "nonexistant" !global;

//----------------------------------------------------------------------
//
// Magic mixin
//
//----------------------------------------------------------------------

@mixin flint (
	$key: null,
	$span: null,
	$context: null,
	$gutter: null,
	$shift: null
	) {

	// FOUNDATIONS
	//----------------------------------------------------------------------
	// flint(foundation) or flint(container)

	@if $key == "foundation" {

		// apply global border-box-sizing if true

		@if get-value(settings, border-box-sizing) == true {
			$foundation: "existant" !global;
		}
		
		// foundation is now globally existant
		
		@if $foundation == "existant" {
      			-moz-box-sizing: border-box;
			-webkit-box-sizing: border-box;
			box-sizing: border-box;
			@content;
    		}

	} @else if $key == "container"
		or exists($flint, $key) and $span != null
		or length($key) == 1 and exists($flint, $key) == false
		or length($span) > 1
		or length($key) > 1
		and nth($key, 1) != "from"
		and nth($key, 3) != "to"
		and nth($key, 1) != "for"
		and nth($key, 1) != "greater"
		and nth($key, 2) != "greater"
		and nth($key, 1) != "less"
		and nth($key, 2) != "less"
	{

		// gotta make em block level

		display: block;
		
		// apply individually if foundation is not set globally, but is set to true in config
		
		@if get-value(settings, border-box-sizing) == true and $foundation == "nonexistant" {
      			-moz-box-sizing: border-box;
			-webkit-box-sizing: border-box;
			box-sizing: border-box;

			// warn to either set a global foundation, or turn border-box-sizing off

			@if global-variable-exists(global-foundation-is-set) == false {
				@warn "Global foundation is #{$foundation}. To avoid repeated box-sizing incidents, set a global flint(foundation) rule using the * selector, or turn border-box-sizing to false in your config file.";

				// declare global variable so only a single warning prints out

				$global-foundation-is-set: true !global;
				}
    		}

		// check if max-width is set

		@if get-value(settings, max-width) != false {

			// okay, then check if max-widths value is a key

			@if exists($flint, get-value(settings, max-width)) {
				max-width: get-value(get-value(settings, max-width), breakpoint);
			} @else {
				max-width: get-value(settings, max-width);
			}
		}

		@if $key == "container" {
			float: none;
		} @else { 
			float: unquote(get-value(settings, float-style));
		}
	}

	// @end foundation check
	//----------------------------------------------------------------------
	// RECURSIVE SHORTHAND
	//----------------------------------------------------------------------
	// flint($span), applies across all sizes.

	@if type-of($key) == number and length($key) == 1 or $key == "container" {
		@if $key == "container" and get-value(settings, max-width) != false {
			width: (calc-width(get-value(settings, default), $key));
			margin: 0 auto;
			@content;
		} @else if $key == "container" and get-value(settings, max-width) == false {
			width: (calc-width(get-value(settings, default), $key));
			margin: 0;
			@content;
		} @else {

			// @end check for container
			//----------------------------------------------------------------------
			// loop through config, and apply span to each breakpoint

			@if length($key) == 1 and $span == null {
				@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
					$sh_key: steal-key($i);
					$sh_span: $key;
					$sh_shift: $shift;

					// check to see if key is the framework default, so that no media queries are used

					@if get-value(settings, default) == $sh_key {

						// MARGINS
						//----------------------------------------------------------------------
						// flint(..., $gutter: alpha)

						@if $gutter == null and get-value(settings, gutter) != false and $shift != null {

							@if length($shift) > 1 {
								width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
									if( nth($sh_shift, $i) > 0, 
										(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))),
										(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))) 
									) 
								);
				  				@content;
				  			} @else {
				  				width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, $sh_shift)),
										(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, $sh_shift)) 
									) 
								);
				  			}
						} @else if $gutter == null and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
							margin: 0 calc-margin($sh_key, $sh_span);
							@content;
						} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
							margin: 0 calc-margin($sh_key, $sh_span) 0 0;
							@content;
						} @else if $gutter == "omega" and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
							margin: 0 0 0 calc-margin($sh_key, $sh_span);
							@content;
						} @else if $gutter == "row" or get-value(settings, gutter) == false {
							width: calc-width($sh_key, $sh_span);
							margin: 0;
							@content;
						}

					} @else {

					// else check for span arguments without context and calculate width

						@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
							@if length($shift) > 1 {
					  			@if is-highest-breakpoint($sh_key) == true {
									@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
										width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
											if( nth($sh_shift, $i) > 0, 
												(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))),
												(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))) 
											) 
										);
						  				@content;
						  			}
					  			} @else {
						  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
					  					width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))),
												(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))) 
											) 
										);
						  				@content;
						  			}
						  		}
						  	} @else {
						  		@if is-highest-breakpoint($sh_key) == true {
									@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
										width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, $sh_shift)),
												(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, $sh_shift)) 
											) 
										);
						  				@content;
						  			}
					  			} @else {
						  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
					  					width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, $sh_shift)),
												(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, $sh_shift)) 
											) 
										);
						  				@content;
						  			}
						  		}
						  	}
			  			} @else if $gutter == null and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
									margin: 0 calc-margin($sh_key, $sh_span);
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
									margin: 0 calc-margin($sh_key, $sh_span);
									@content;
								}
							}
						} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
									margin: 0 calc-margin($sh_key, $sh_span) 0 0;
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
									margin: 0 calc-margin($sh_key, $sh_span) 0 0;
									@content;
								}
							}
						} @else if $gutter == "omega" and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
									margin: 0 0 0 calc-margin($sh_key, $sh_span);
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
									margin: 0 0 0 calc-margin($sh_key, $sh_span);
									@content;
								}
							}
						} @else if $gutter == "row" or get-value(settings, gutter) == false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: calc-width($sh_key, $sh_span);
									margin: 0;
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: calc-width($sh_key, $sh_span);
									margin: 0;
									@content;
								}
							}
						}
					}
				}

			// RECURSIVE SHORTHAND + IDENTICAL CONTEXT
			//----------------------------------------------------------------------
			// flint($span, $context)

			} @else if length($key) == 1 and length($span) == 1 {
				@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
					$sh_key: steal-key($i);
					$sh_span: $key;
					$sh_context: $span;
					$sh_shift: $shift;

					// check to see if key is the framework default, so that no media queries are used

					@if get-value(settings, default) == $sh_key {

						@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
							@if length($shift) > 1 {
								width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( nth($sh_shift, $i) > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
									) 
								);
				  				@content;
				  			} @else {
				  				width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
									) 
								);
				  				@content;
				  			}
						} @else if $gutter == null and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
							@content;
						} @else if $gutter == "omega" and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						} @else if $gutter == "row" or get-value(settings, gutter) == false {
							width: calc-width($sh_key, $sh_span, $sh_context);
							margin: 0;
							@content;
						}

					} @else {

					// else check for span arguments with context and calculate width

						@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
							@if length($shift) > 1 {
					  			@if is-highest-breakpoint($sh_key) == true {
									@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
										width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( nth($sh_shift, $i) > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
											) 
										);
						  				@content;
						  			}
					  			} @else {
						  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
					  					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
											) 
										);
						  				@content;
						  			}
						  		}
						  	} @else {
						  		@if is-highest-breakpoint($sh_key) == true {
									@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
										width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
											) 
										);
						  				@content;
						  			}
					  			} @else {
						  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
					  					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
											) 
										);
						  				@content;
						  			}
						  		}
						  	}
			  			} @else if $gutter == null and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							}
						} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
									@content;
								}
							}
						} @else if $gutter == "omega" and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							}
						} @else if $gutter == "row" or get-value(settings, gutter) == false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: calc-width($sh_key, $sh_span, $sh_context);
									margin: 0;
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: calc-width($sh_key, $sh_span, $sh_context);
									margin: 0;
									@content;
								}
							}
						}
					}
				}

			// RECURSIVE SHORTHAND + DIFFERING CONTEXT
			//----------------------------------------------------------------------
			// flint($span, $context)

			} @else if length($key) == 1 and length($span) > 1 {
				@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
					$sh_key: steal-key($i);
					$sh_span: $key;
					$sh_context: nth($span, $i);
					$sh_shift: $shift;

					// check to see if key is the framework default, so that no media queries are used

					@if get-value(settings, default) == $sh_key {

						@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
							@if length($shift) > 1 {
								width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( nth($sh_shift, $i) > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
									) 
								);
				  				@content;
				  			} @else {
				  				width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
									) 
								);
				  				@content;
				  			}
						} @else if $gutter == null and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
							@content;
						} @else if $gutter == "omega" and get-value(settings, gutter) != false {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						} @else if $gutter == "row" or get-value(settings, gutter) == false {
							width: calc-width($sh_key, $sh_span, $sh_context);
							margin: 0;
							@content;
						}

					} @else {

					// else check for span arguments with context and calculate width

						@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
							@if length($shift) > 1 {
					  			@if is-highest-breakpoint($sh_key) == true {
									@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
										width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( nth($sh_shift, $i) > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
											) 
										);
						  				@content;
						  			}
					  			} @else {
						  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
					  					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
											) 
										);
						  				@content;
						  			}
						  		}
						  	} @else {
						  		@if is-highest-breakpoint($sh_key) == true {
									@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
										width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
											) 
										);
						  				@content;
						  			}
					  			} @else {
						  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
					  					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
						  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
											if( $sh_shift > 0, 
												(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
												(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
											) 
										);
						  				@content;
						  			}
						  		}
						  	}
			  			} @else if $gutter == null and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							}
						} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
									@content;
								}
							}
						} @else if $gutter == "omega" and get-value(settings, gutter) != false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
									margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
									@content;
								}
							}
						} @else if $gutter == "row" or get-value(settings, gutter) == false {
							@if is-highest-breakpoint($sh_key) == true {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
									width: calc-width($sh_key, $sh_span, $sh_context);
									margin: 0;
									@content;
								}
							} @else {
								@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
									width: calc-width($sh_key, $sh_span, $sh_context);
									margin: 0;
									@content;
								}
							}
						}
					}
				}
			}
		}
	}

	// @end single argument
	//----------------------------------------------------------------------
	// VARIABLE SHORTHAND
	//----------------------------------------------------------------------
	// flint($span-for-default $span-for-next-break $span-for-next-break)

	@if length($key) > 1
		and $span == null
		and nth($key, 1) != "from"
		and nth($key, 3) != "to"
		and nth($key, 1) != "for"
		and nth($key, 1) != "greater"
		and nth($key, 2) != "greater"
		and nth($key, 1) != "less"
		and nth($key, 2) != "less" 
	{
		@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
			$sh_key: steal-key($i);
			$sh_span: nth($key, $i);
			$sh_shift: $shift;

			@if get-value(settings, default) == $sh_key and $sh_key != 0 and $sh_span != 0 {

				@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
					@if length($shift) > 1 {
						width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
		  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
							if( nth($sh_shift, $i) > 0, 
								(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))),
								(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))) 
							) 
						);
						@content;
					} @else {
		  				width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
		  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
							if( $sh_shift > 0, 
								(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, $sh_shift)),
								(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, $sh_shift)) 
							) 
						);
						@content;
					}
				} @else if $gutter == null and get-value(settings, gutter) != false {
					width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
					margin: 0 calc-margin($sh_key, $sh_span);
					@content;
				} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
					width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
					margin: 0 calc-margin($sh_key, $sh_span) 0 0;
					@content;
				} @else if $gutter == "omega" and get-value(settings, gutter) != false {
					width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
					margin: 0 0 0 calc-margin($sh_key, $sh_span);
					@content;
				} @else if $gutter == "row" or get-value(settings, gutter) == false {
					width: calc-width($sh_key, $sh_span);
					margin: 0;
					@content;
				}

			} @else {

				@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
					@if length($shift) > 1 {
			  			@if is-highest-breakpoint($sh_key) == true {
							@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
								width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
									if( nth($sh_shift, $i) > 0, 
										(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))),
										(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))) 
									) 
								);
				  				@content;
				  			}
			  			} @else {
				  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
			  					width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
									if( nth($sh_shift, $i) > 0, 
										(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))),
										(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, nth($sh_shift, $i))) 
									) 
								);
				  				@content;
				  			}
				  		}
				  	} @else {
				  		@if is-highest-breakpoint($sh_key) == true {
							@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
								width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, $sh_shift)),
										(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, $sh_shift)) 
									) 
								);
				  				@content;
				  			}
			  			} @else {
				  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
			  					width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span) 0 ( 
									if( $shift > 0, 
										(calc-margin($sh_key, $sh_span)) + (calc-width($sh_key, $sh_shift)),
										(calc-margin($sh_key, -$sh_span)) + (calc-width($sh_key, $sh_shift)) 
									) 
								);
				  				@content;
				  			}
				  		}
				  	}
	  			} @else if $gutter == null and get-value(settings, gutter) != false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
							margin: 0 calc-margin($sh_key, $sh_span);
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span)) - ((calc-margin($sh_key, $sh_span))*2);
							margin: 0 calc-margin($sh_key, $sh_span);
							@content;
						}
					}	
				} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
							margin: 0 calc-margin($sh_key, $sh_span) 0 0;
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
							margin: 0 calc-margin($sh_key, $sh_span) 0 0;
							@content;
						}
					}
				} @else if $gutter == "omega" and get-value(settings, gutter) != false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
							margin: 0 0 0 calc-margin($sh_key, $sh_span);
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span)) - (calc-margin($sh_key, $sh_span));
							margin: 0 0 0 calc-margin($sh_key, $sh_span);
							@content;
						}
					}
				} @else if $gutter == "row" or get-value(settings, gutter) == false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: calc-width($sh_key, $sh_span);
							margin: 0;
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: calc-width($sh_key, $sh_span);
							margin: 0;
							@content;
						}
					}
				}
			}
		}

	// VARIABLE SHORTHAND + CONTEXT
	//----------------------------------------------------------------------
	// flint($span-for-default $span-for-next-break, $context-for-default $context-for-next)

	} @else if length($key) > 1
		and length($span) > 1
		and nth($key, 1) != "from"
		and nth($key, 3) != "to"
		and nth($key, 1) != "for"
		and nth($key, 1) != "greater"
		and nth($key, 2) != "greater"
		and nth($key, 1) != "less"
		and nth($key, 2) != "less" 
	{
		@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
			$sh_key: steal-key($i);
			$sh_span: nth($key, $i);
			$sh_context: nth($span, $i);
			$sh_shift: $shift;

			@if get-value(settings, default) == $sh_key {

				@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
					@if length($shift) > 1 {
						width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
		  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
							if( nth($sh_shift, $i) > 0, 
								(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
								(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
							) 
						);
		  				@content;
		  			} @else {
		  				width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
		  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
							if( $sh_shift > 0, 
								(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
								(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
							) 
						);
		  				@content;
		  			}
				} @else if $gutter == null and get-value(settings, gutter) != false {
					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
					margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
					@content;
				} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
					width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
					margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
					@content;
				} @else if $gutter == "omega" and get-value(settings, gutter) != false {
					width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
					margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
					@content;
				} @else if $gutter == "row" or get-value(settings, gutter) == false {
					width: calc-width($sh_key, $sh_span, $sh_context);
					margin: 0;
					@content;
				}

			} @else {

				@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
					@if length($shift) > 1 {
			  			@if is-highest-breakpoint($sh_key) == true {
							@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
								width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( nth($sh_shift, $i) > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
									) 
								);
				  				@content;
				  			}
			  			} @else {
				  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
			  					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, nth($sh_shift, $i), $sh_context)) 
									) 
								);
				  				@content;
				  			}
				  		}
				  	} @else {
				  		@if is-highest-breakpoint($sh_key) == true {
							@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
								width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
									) 
								);
				  				@content;
				  			}
			  			} @else {
				  			@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
			  					width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
				  				margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 ( 
									if( $sh_shift > 0, 
										(calc-margin($sh_key, $sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)),
										(calc-margin($sh_key, -$sh_span, $sh_context)) + (calc-width($sh_key, $sh_shift, $sh_context)) 
									) 
								);
				  				@content;
				  			}
				  		}
				  	}
	  			} @else if $gutter == null and get-value(settings, gutter) != false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - ((calc-margin($sh_key, $sh_span, $sh_context))*2);
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						}
					}
				} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 calc-margin($sh_key, $sh_span, $sh_context) 0 0;
							@content;
						}
					}
				} @else if $gutter == "omega" and get-value(settings, gutter) != false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: (calc-width($sh_key, $sh_span, $sh_context)) - (calc-margin($sh_key, $sh_span, $sh_context));
							margin: 0 0 0 calc-margin($sh_key, $sh_span, $sh_context);
							@content;
						}
					}
				} @else if $gutter == "row" or get-value(settings, gutter) == false {
					@if is-highest-breakpoint($sh_key) == true {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) {
							width: calc-width($sh_key, $sh_span, $sh_context);
							margin: 0;
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, $sh_key, $i) ) and ( max-width: calc-breakpoint(to, $sh_key, $i) ) {
							width: calc-width($sh_key, $sh_span, $sh_context);
							margin: 0;
							@content;
						}
					}
				}
			}
		}
	
	// @end shorthand
	//----------------------------------------------------------------------
	// MEDIA QUERY WRAP
	//----------------------------------------------------------------------
	// flint($key), or flint(from $lower-key to $higher-key)

	// if no span and context argument, simply wrap @content block in media query 

	} @else if exists($flint, $key) and $span == null and $context == null or length($key) > 1 {

		// only key-x breakpoint

		@if length($key) == 1 {
			@if is-highest-breakpoint($key) == true {
				@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
					@content;
				}
			} @else {
				@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
					@content;
				}
			}

			// from key breakpoint to infinity

		} @else if length($key) > 1 and nth($key, 1) == "from" and nth($key, 3) == "to" and nth($key, 4) == "infinity" {
			@media only screen and ( min-width: calc-breakpoint(from, nth($key, 2), get-index(nth($key, 2))) ) {
				@content;
			}

			// from key-x breakpoint to key-y breakpoint

		} @else if length($key) > 1 and nth($key, 1) == "from" and nth($key, 3) == "to" {
			@media only screen and ( min-width: calc-breakpoint(from, nth($key, 2), get-index(nth($key, 2))) ) and ( max-width: calc-breakpoint(to, nth($key, 4), get-index(nth($key, 4))) ) {
				@content;
			}

			// greater than key-x breakpoint

		} @else if length($key) > 1 and nth($key, 1) == "greater" and nth($key, 2) == "than" {
			@media only screen and ( min-width: (calc-breakpoint(to, nth($key, 3), get-index(nth($key, 3))) + 1) ) {
				@content;
			}

			// (y)px greater than key-x breakpoint

		} @else if length($key) > 1 and nth($key, 2) == "greater" and nth($key, 3) == "than" {
			@media only screen and ( min-width: (calc-breakpoint(to, nth($key, 4), get-index(nth($key, 4))) + nth($key, 1)) ) {
				@content;
			}

			// less than key-x breakpoint

		} @else if length($key) > 1 and nth($key, 1) == "less" and nth($key, 2) == "than" {
			@media only screen and ( max-width: (calc-breakpoint(to, nth($key, 3), get-index(nth($key, 3))) - 1) ) {
				@content;
			}

			// (y)px less than key-x breakpoint

		} @else if length($key) > 1 and nth($key, 2) == "less" and nth($key, 3) == "than" {
			@media only screen and ( max-width: (calc-breakpoint(to, nth($key, 4), get-index(nth($key, 4))) - nth($key, 1)) ) {
				@content;
			}

			// for key-x key-y key-z

		} @else if length($key) > 1 and nth($key, 1) == "for" {
			@for $i from 1 through length($key) {
				@if exists($flint, nth($key, $i)) {
					@if is-highest-breakpoint(nth($key, $i)) == true {
						@media only screen and ( min-width: calc-breakpoint(from, nth($key, $i), get-index(nth($key, $i))) ) {
							@content;
						}
					} @else {
						@media only screen and ( min-width: calc-breakpoint(from, nth($key, $i), get-index(nth($key, $i))) ) and ( max-width: calc-breakpoint(to, nth($key, $i), get-index(nth($key, $i))) ) {
							@content;
						}
					}
				}
			}
		}

	// NO CONTEXT
	//----------------------------------------------------------------------
	// flint($key, $span)

	} @else if exists($flint, $key) and $context == null { 
	  
	  // check if key is default
	  
	    @if get-value(settings, default) == $key {
	      
			@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
				margin: 0 calc-margin($key, $span) 0 ( 
					if( $shift > 0, 
						(calc-margin($key, $span)) + (calc-width($key, $shift)),
						(calc-margin($key, -$span)) + (calc-width($key, $shift)) 
					) 
				);
			} @else if $gutter == null and get-value(settings, gutter) != false {
				width: (calc-width($key, $span)) - ((calc-margin($key, $span))*2);
				margin: 0 calc-margin($key, $span);
				@content;
			} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
				width: (calc-width($key, $span)) - (calc-margin($key, $span));
				margin: 0 calc-margin($key, $span) 0 0;
				@content;
			} @else if $gutter == "omega" and get-value(settings, gutter) != false {
				width: (calc-width($key, $span)) - (calc-margin($key, $span));
				margin: 0 0 0 calc-margin($key, $span);
				@content;
			} @else if $gutter == "row" or get-value(settings, gutter) == false {
				width: calc-width($key, $span);
				margin: 0;
				@content;
			}
				
	    } @else {

			// check for settings arguments, adjust gutters and width based on argument

	  		@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span)) - ((calc-margin($key, $span))*2);
		  				margin: 0 calc-margin($key, $span) 0 ( 
							if( $shift > 0, 
								(calc-margin($key, $span)) + (calc-width($key, $shift)),
								(calc-margin($key, -$span)) + (calc-width($key, $shift)) 
							) 
						);
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
	  					width: (calc-width($key, $span)) - ((calc-margin($key, $span))*2);
		  				margin: 0 calc-margin($key, $span) 0 ( 
							if( $shift > 0, 
								(calc-margin($key, $span)) + (calc-width($key, $shift)),
								(calc-margin($key, -$span)) + (calc-width($key, $shift)) 
							) 
						);
		  				@content;
		  			}
		  		}
  			} @else if $gutter == null and get-value(settings, gutter) != false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span)) - ((calc-margin($key, $span))*2);
		  				margin: 0 calc-margin($key, $span);
		  				@content;
					}
				} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span)) - ((calc-margin($key, $span))*2);
		  				margin: 0 calc-margin($key, $span);
		  				@content;
		  			}
		  		}
	  		} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span)) - (calc-margin($key, $span));
		  				margin: 0 calc-margin($key, $span) 0 0;
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span)) - (calc-margin($key, $span));
		  				margin: 0 calc-margin($key, $span) 0 0;
		  				@content;
		  			}
		  		}
	  		} @else if $gutter == "omega" and get-value(settings, gutter) != false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span)) - (calc-margin($key, $span));
		  				margin: 0 0 0 calc-margin($key, $span);
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span)) - (calc-margin($key, $span));
		  				margin: 0 0 0 calc-margin($key, $span);
		  				@content;
		  			}
		  		}
	  		} @else if $gutter == "row" or get-value(settings, gutter) == false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: calc-width($key, $span);
		  				margin: 0;
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: calc-width($key, $span);
		  				margin: 0;
		  				@content;
		  			}
		  		}
	  		}
	    }

	// HAS CONTEXT
	//----------------------------------------------------------------------
	// flint($key, $span, $context)

	// else check for context argument and calculate width based on context

	} @else if exists($flint, $key) and $context != null {
	  
	  	// check if key is default
	  
		  @if get-value(settings, default) == $key {
	      
			@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
				margin: 0 calc-margin($key, $span, $context) 0 ( 
					if( $shift > 0, 
						(calc-margin($key, $span, $context)) + (calc-width($key, $shift, $context)),
						(calc-margin($key, -$span, $context)) + (calc-width($key, $shift, $context)) 
					) 
				);
			} @else if $gutter == null and get-value(settings, gutter) != false {
				width: (calc-width($key, $span, $context)) - ((calc-margin($key, $span, $context))*2);
				margin: 0 calc-margin($key, $span, $context);
				@content;
			} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
				width: (calc-width($key, $span, $context)) - (calc-margin($key, $span, $context));
				margin: 0 calc-margin($key, $span, $context) 0 0;
				@content;
			} @else if $gutter == "omega" and get-value(settings, gutter) != false {
				width: (calc-width($key, $span, $context)) - (calc-margin($key, $span, $context));
				margin: 0 0 0 calc-margin($key, $span, $context);
				@content;
			} @else if $gutter == "row" or get-value(settings, gutter) == false {
				width: calc-width($key, $span, $context);
				margin: 0;
				@content;
			}
				
	    } @else {

			// check for settings arguments, adjust gutters and width based on argument

	  		@if $gutter == null and get-value(settings, gutter) != false and $shift != null {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span, $context)) - ((calc-margin($key, $span, $context))*2);
		  				margin: 0 calc-margin($key, $span, $context) 0 ( 
							if( $shift > 0, 
								(calc-margin($key, $span, $context)) + (calc-width($key, $shift, $context)),
								(calc-margin($key, -$span, $context)) + (calc-width($key, $shift, $context)) 
							) 
						);
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span, $context)) - ((calc-margin($key, $span, $context))*2);
		  				margin: 0 calc-margin($key, $span, $context) 0 ( 
							if( $shift > 0, 
								(calc-margin($key, $span, $context)) + (calc-width($key, $shift, $context)),
								(calc-margin($key, -$span, $context)) + (calc-width($key, $shift, $context)) 
							) 
						);
		  				@content;
		  			}
		  		}
  			} @else if $gutter == null and get-value(settings, gutter) != false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span, $context)) - ((calc-margin($key, $span, $context))*2);
		  				margin: 0 calc-margin($key, $span, $context);
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span, $context)) - ((calc-margin($key, $span, $context))*2);
		  				margin: 0 calc-margin($key, $span, $context);
		  				@content;
		  			}
		  		}
	  		} @else if $gutter == "alpha" and get-value(settings, gutter) != false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span, $context)) - (calc-margin($key, $span, $context));
		  				margin: 0 calc-margin($key, $span, $context) 0 0;
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span, $context)) - (calc-margin($key, $span, $context));
		  				margin: 0 calc-margin($key, $span, $context) 0 0;
		  				@content;
		  			}
		  		}
	  		} @else if $gutter == "omega" and get-value(settings, gutter) != false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: (calc-width($key, $span, $context)) - (calc-margin($key, $span, $context));
		  				margin: 0 0 0 calc-margin($key, $span, $context);
		  				@content;
		  			}
	  			} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: (calc-width($key, $span, $context)) - (calc-margin($key, $span, $context));
		  				margin: 0 0 0 calc-margin($key, $span, $context);
		  				@content;
		  			}
		  		}
	  		} @else if $gutter == "row" or get-value(settings, gutter) == false {
	  			@if is-highest-breakpoint($key) == true {
					@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) {
						width: calc-width($key, $span, $context);
		  				margin: 0;
		  				@content;
		  			}
				} @else {
		  			@media only screen and ( min-width: calc-breakpoint(from, $key, get-index($key)) ) and ( max-width: calc-breakpoint(to, $key, get-index($key)) ) {
		  				width: calc-width($key, $span, $context);
		  				margin: 0;
		  				@content;
		  			}
		  		}
			}
		}
	}

	// HIDE
	//----------------------------------------------------------------------
	// flint(0) or flint($key, 0)

	@if variable-exists(sh_key) or variable-exists(sh_span) {
		@if length($span) > 1 or length($key) > 1 or length($sh_key) > 1 or length($sh_span) > 1 {
			@for $i from 1 through (length(map-fetch($flint, config)) - 1) {
				@if nth($span, $i) == 0 or nth($key, $i) == 0 or nth($sh_key, $i) == 0 or nth($sh_span, $i) == 0 {
					display: none;
				}
			}
		}
	} @else {
		@if $span == 0 or $key == 0 {
			display: none;
		}
	}

	// DEBUG-MODE
	//----------------------------------------------------------------------

	@if get-value(settings, debug-mode) == true {

	}

}
