// Keeps count of all instances with arguments, stores in global var
// -------------------------------------------------------------------------------
// @dependence `get-value()`
// -------------------------------------------------------------------------------
// @param $key [string] : computed breakpoint of instance
// @param $span [integer] : computed span of instance
// @param $context [integer] : computed context of instance
// @param $gutter [integer] : computed gutter of instance
// @param $shift [integer] : computed shift of instance
// @param $outputWidth [integer] : computed width of instance
// @param $outputMarginRight [integer] : computed right margin of instance
// @param $outputMarginLeft [integer] : computed left margin of instance
// -------------------------------------------------------------------------------
// @return instance map

@function instance($key, $span, $context, $gutter, $shift, $outputWidth, $outputMarginRight, $outputMarginLeft) {
	  // Increase the instance count
    $flint__instance-count: $flint__instance-count + 1 !global;
    // Lets clean up the selector a bit...
    $selector-string: selector_string();
    $selector-list: string-to-list($selector-string);
    $selector-cleaned: list-to-string($selector-list, " ");

    $flint__instance: (
		"#{$selector-cleaned}::#{$key}": (
			"instance-count": #{$flint__instance-count},
			"parent-selector": #{if(get-family-instance($key) != false, get-family-instance($key), none)},
			"key": #{$key},
			"breakpoint": #{get-value($key, breakpoint)},
			"columns": #{get-value($key, columns)},
			"span": #{$span},
			"context": #{if($context == "auto", get-instance-value($key, "span"), $context)},
			"gutter": #{$gutter},
			"shift": #{$shift},
			"output": (
				"width": #{$outputWidth},
				"margin-right": #{$outputMarginRight},
				"margin-left": #{$outputMarginLeft},
			),
		),
    );
    
    @return map-merge($flint__instances, $flint__instance);
}