// Main API
// -------------------------------------------------------------------------------
// @param $key [string | number | list] : key of breakpoint [shorthand: span]
// @param $span [string | number | list] : value of span of column [shorthand: context]
// @param $context [number | list] : value of context of span
// @param $gutter [string | list] : alias for gutter modifier
// @param $shift [number | list] : value to shift column
// -------------------------------------------------------------------------------
// @output foundation styles | container styles | calculated styles

@mixin _(
    $key: null,
    $span: null,
    $context: null,
    $gutter: null,
    $shift: null
) {

    // Emit deprecation warnings
    // ----
    @if $shift != null {
        @warn "The shift modifier has been deprecated due to it having such little-use and being a pain to maintain. It is set to be removed in version 2.0";
    }

    // Clearfix
    // -------------------------------------------------------------------------------
    // @param [string] : clearfix instance
    // -------------------------------------------------------------------------------
    // @output clear styles | use existing clearfix mixin
    @if $key == "clear" or $span == "clear" or $context == "clear" {

        // Check if key exists as breakpoint
        //  if so wrap in query to not affect others
        @if flint-exists($flint, $key) {

            @if flint-get-value("settings", "grid") == "fluid" {
                @if flint-is-highest-breakpoint($key) {
                    @media ( min-width: (flint-calc-breakpoint("next", $key, flint-get-index($key)) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                        @include flint-clearfix;
                        @content;
                    }
                } @else {
                    @media ( min-width: (flint-calc-breakpoint("next", $key, flint-get-index($key)) + if(flint-is-lowest-breakpoint($key), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) and ( max-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) {
                        @include flint-clearfix;
                        @content;
                    }
                }
            } @else if flint-get-value("settings", "grid") == "fixed" {
                @if flint-is-highest-breakpoint($key) {
                    @media ( min-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) {
                        @include flint-clearfix;
                        @content;
                    }
                } @else {
                    @media ( min-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) and ( max-width: (flint-calc-breakpoint("prev", $key, flint-get-index($key)) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                        @include flint-clearfix;
                        @content;
                    }
                }
            }

        } @else {

            @include flint-clearfix;
            @content;

        }
    }

    // Foundation
    // -------------------------------------------------------------------------------
    // @param $key [string] : foundation instance
    // -------------------------------------------------------------------------------
    // @output global box-sizing
    @if $key == "foundation" {

        // Apply global border-box-sizing if set to true
        @if flint-get-value("settings", "border-box-sizing") {
            $flint__foundation: "existant" !global;
        }

        // Foundation is now globally existant
        // ----
        @if $flint__foundation == "existant" {
            @at-root *, *:before, *:after {
                @include flint-box-sizing;
                @content;
            }
        }

    // Container
    // -------------------------------------------------------------------------------
    // @param [string] : container instance
    // -------------------------------------------------------------------------------
    // @output container styles
    } @else if $key == "container" or $span == "container" or $context == "container" {

        // Apply individually if foundation is not set globally, but is set to true in config
        @if flint-get-value("settings", "border-box-sizing") and $flint__foundation == "nonexistant" {
            @include flint-box-sizing();

            // Warn to either set a global foundation, or turn border-box-sizing off
            @if global-variable-exists("global-foundation-is-set") == false {
                @warn "Global foundation is #{$flint__foundation}. To avoid repeated box-sizing incidents, set a global _('foundation') rule, or turn border-box-sizing to false in your config file.";

                // Declare global variable so only a single warning prints out
                $global-foundation-is-set: true !global;
            }
        }

        // Output container for each breakpoint if fixed grid
        // ----
        @if $key == "container" and flint-get-value("settings", "grid") == "fixed" {

            @for $i from 1 through length($flint__all__keys) {

                // Set up variables
                $calc-key: flint-steal-key($i);

                // Key is default, no media queries
                @if flint-is-default($calc-key) {

                    @include flint-container($calc-key, $i) {
                        @content;
                    }

                // Not default, wrap in media queries
                } @else {

                    // Highest breakpoint? No max-width
                    @if flint-is-highest-breakpoint($calc-key) {

                        @media ( min-width: flint-calc-breakpoint("alias", $calc-key, $i) ) {
                            @include flint-container($calc-key, $i) {
                                @content;
                            }
                        }

                    } @else {

                        @media ( min-width: flint-calc-breakpoint("alias", $calc-key, $i) ) and ( max-width: (flint-calc-breakpoint("prev", $calc-key, $i) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                            @include flint-container($calc-key, $i) {
                                @content;
                            }
                        }

                    }
                }
            }

        // Output container for specific breakpoint if exists
        // ----
        } @else if flint-exists($flint, $key) and flint-get-value("settings", "grid") == "fixed" {

            @if flint-is-highest-breakpoint($key) {

                @media ( min-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) {
                    @include flint-container($key) {
                        @content;
                    }
                }

            } @else {

                @media ( min-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) and ( max-width: (flint-calc-breakpoint("prev", $key, flint-get-index($key)) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                    @include flint-container($key) {
                        @content;
                    }
                }

            }
        } @else if flint-exists($flint, $key) and flint-get-value("settings", "grid") == "fluid" {
            @if flint-is-highest-breakpoint($key) {

                @media ( min-width: (flint-calc-breakpoint("next", $key, flint-get-index($key)) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                    @include flint-container {
                        @content;
                    }
                }

            } @else {

                @media ( min-width: (flint-calc-breakpoint("next", $key, flint-get-index($key)) + if(flint-is-lowest-breakpoint($key), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) and ( max-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) {
                    @include flint-container {
                        @content;
                    }
                }

            }
        } @else {
            @include flint-container {
                @content;
            }
        }

    // Creates a new instance, add to global instance map
    // -----
    } @else {

        // Apply individually if foundation is not set globally, but is set to true in config
        @if flint-get-value("settings", "border-box-sizing") and $flint__foundation == "nonexistant" {
            @include flint-box-sizing;

            // Warn to either set a global foundation, or turn border-box-sizing off
            @if global-variable-exists("global-foundation-is-set") == false {
                @warn "Global foundation is #{$flint__foundation}. To avoid repeated box-sizing incidents, set a global _('foundation') rule, or turn border-box-sizing to false in your config file.";

                // Declare global variable so only a single warning prints out
                $global-foundation-is-set: true !global;
            }
        }

        // Recursive shorthand without context
        // -------------------------------------------------------------------------------
        // @param $span [number] : span value
        // @param $span [null] : null context value
        // -------------------------------------------------------------------------------
        // @output calculated styles
        @if flint-is-number($key) and length($key) == 1 and $span == null

        // Recursive shorthand with identical context
        // -------------------------------------------------------------------------------
        // @param $key [number] : span value
        // @param $span [number | string] : context value of span
        // -------------------------------------------------------------------------------
        // @output calculated styles
        or flint-is-number($key) and length($key) == 1 and flint-is-number($span) and length($span) == 1
        or flint-is-number($key) and length($key) == 1 and $span == "auto"

        // Recursive shorthand with differing context
        // -------------------------------------------------------------------------------
        // @param $key [number] : span value
        // @param $span [list | string] : context value of span for each breakpoint
        // -------------------------------------------------------------------------------
        // @throw [warning] : if length does not match number of breakpoints
        // -------------------------------------------------------------------------------
        // @output calculated styles
        or flint-is-number($key) and length($key) == 1 and flint-types-in-list($span, "number")
        or flint-is-number($key) and length($key) == 1 and $span == "auto"

        // Variable shorthand
        // -------------------------------------------------------------------------------
        // @param $key [list] : span value for each breakpoint
        // @param $span [null] : null context value
        // -------------------------------------------------------------------------------
        // @throw [warning] : if length does not match number of breakpoints
        // -------------------------------------------------------------------------------
        // @output calculated styles
        or flint-types-in-list($key, "number") and $span == null

        // Variable shorthand with context
        // -------------------------------------------------------------------------------
        // @param $key [list] : span value for each breakpoint
        // @param $span [list | string] : context value for each breakpoint
        // -------------------------------------------------------------------------------
        // @throw [warning] : if lengths do not match number of breakpoints
        // -------------------------------------------------------------------------------
        // @output calculated styles
        or flint-types-in-list($key, "number") and flint-types-in-list($span, "number")
        or flint-types-in-list($key, "number") and $span == "auto" {

            // Emit warning for invalid argument lengths
            @if flint-types-in-list($key, "number") and length($key) != length($flint__all__keys) {
                @warn "Invalid argument length of #{length($key)} for span. Please provide an argument for each breakpoint in your config (#{length($flint__all__keys)}). Your argument was: #{$key}";
            } @else if flint-types-in-list($span, "number") and length($span) != length($flint__all__keys) {
                @warn "Invalid argument length of #{length($span)} for context. Please provide an argument for each breakpoint in your config (#{length($flint__all__keys)}). Your argument was: #{$span}";
            } @else {

                @for $i from 1 through length($flint__all__keys) {

                    $calc-key: flint-steal-key($i);
                    $calc-span: $key;
                    $calc-context: $span;
                    $calc-gutter: $gutter;
                    $calc-shift: $shift;

                    @if flint-is-default($calc-key) {

                        @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift, $i) {
                            @content;
                        }

                    } @else {

                        @if flint-get-value("settings", "grid") == "fluid" {

                            @if flint-is-highest-breakpoint($calc-key) {

                                @media ( min-width: (flint-calc-breakpoint("next", $calc-key, $i) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                                    @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media ( min-width: (flint-calc-breakpoint("next", $calc-key, $i) + if(flint-is-lowest-breakpoint($calc-key), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) and ( max-width: flint-calc-breakpoint("alias", $calc-key, $i) ) {
                                    @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else if flint-get-value("settings", "grid") == "fixed" {

                            @if flint-is-highest-breakpoint($calc-key) {

                                @media ( min-width: flint-calc-breakpoint("alias", $calc-key, $i) ) {
                                    @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media ( min-width: flint-calc-breakpoint("alias", $calc-key, $i) ) and ( max-width: (flint-calc-breakpoint("prev", $calc-key, $i) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                                    @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else {
                            @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                        }
                    }
                }
            }

        // Call by alias
        // -------------------------------------------------------------------------------
        // @param $key [string] : breakpoint alias
        // @param $span [number] : span value
        // @param $context [null] : context value of span
        // -------------------------------------------------------------------------------
        // @output calculated styles
        } @else if flint-is-string($key) and flint-is-number($span) and $context == null

        // Call by alias with context
        // -------------------------------------------------------------------------------
        // @param $key [string] : breakpoint alias
        // @param $span [number] : span value
        // @param $context [number | string] : context value of span
        // -------------------------------------------------------------------------------
        // @output calculated styles
        or flint-is-string($key) and flint-is-number($span) and flint-is-number($context)
        or flint-is-string($key) and flint-is-number($span) and $context == "auto" {

            // Emit warning for invalid argument lengths
            @if not flint-exists($flint, $key) {
                @warn "Invalid argument: #{$key}. Breakpoint does not exist. Please provide a valid argument.";
            } @else {

                $calc-key: $key;
                $calc-span: $span;
                $calc-context: $context;
                $calc-gutter: $gutter;
                $calc-shift: $shift;

                @if flint-is-default($calc-key) {

                    @include flint-calculate ($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift) {
                        @content;
                    }

                } @else {

                    @if flint-get-value("settings", "grid") == "fluid" {

                        @if flint-is-highest-breakpoint($calc-key) {

                            @media ( min-width: (flint-calc-breakpoint("next", $calc-key, flint-get-index($calc-key)) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                                @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift) {
                                    @content;
                                }
                            }

                        } @else {

                            @media ( min-width: (flint-calc-breakpoint("next", $calc-key, flint-get-index($calc-key)) + if(flint-is-lowest-breakpoint($calc-key), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) and ( max-width: flint-calc-breakpoint("alias", $calc-key, flint-get-index($calc-key)) ) {
                                @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift) {
                                    @content;
                                }
                            }

                        }

                    } @else if flint-get-value("settings", "grid") == "fixed" {

                        @if flint-is-highest-breakpoint($calc-key) {

                            @media ( min-width: flint-calc-breakpoint("alias", $calc-key, flint-get-index($calc-key)) ) {
                                @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift) {
                                    @content;
                                }
                            }

                        } @else {

                            @media ( min-width: flint-calc-breakpoint("alias", $calc-key, flint-get-index($calc-key)) ) and ( max-width: (flint-calc-breakpoint("prev", $calc-key, flint-get-index($calc-key)) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                                @include flint-calculate($calc-key, $calc-span, $calc-context, $calc-gutter, $calc-shift) {
                                    @content;
                                }
                            }

                        }

                    } @else {
                        @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                    }
                }
            }

        // Wrap @content in media queries
        // -------------------------------------------------------------------------------
        // @param $key [string | list] : defines how to make up media query
        // -------------------------------------------------------------------------------
        // @output styles wrapped in media query
        } @else if flint-exists($flint, $key) and $span == null and $context == null
        or flint-is-list($key) and $span == null and $context == null {

            // Call $key breakpoint by alias
            // -------------------------------------------------------------------------------
            // @param $key [string] : only for $key breakpoint
            // -------------------------------------------------------------------------------
            @if length($key) == 1 {

                @if flint-get-value("settings", "grid") == "fluid" {
                    @if flint-is-highest-breakpoint($key) {
                        @media ( min-width: (flint-calc-breakpoint("next", $key, flint-get-index($key)) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                            @content;
                        }
                    } @else {
                        @media ( min-width: (flint-calc-breakpoint("next", $key, flint-get-index($key)) + if(flint-is-lowest-breakpoint($key), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) and ( max-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) {
                            @content;
                        }
                    }
                } @else if flint-get-value("settings", "grid") == "fixed" {
                    @if flint-is-highest-breakpoint($key) {
                        @media ( min-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) {
                            @content;
                        }
                    } @else {
                        @media ( min-width: flint-calc-breakpoint("alias", $key, flint-get-index($key)) ) and ( max-width: (flint-calc-breakpoint("prev", $key, flint-get-index($key)) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                            @content;
                        }
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // From $key breakpoint to infinity
            // -------------------------------------------------------------------------------
            // @param $key [list : from key to infinity] : min-width from $key breakpoint
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string", 4) and nth($key, 1) == "from" and nth($key, 3) == "to" and nth($key, 4) == "infinity" {

                @if flint-get-value("settings", "grid") == "fluid" {
                    @media ( min-width: (flint-calc-breakpoint("next", nth($key, 2), flint-get-index(nth($key, 2))) + if(flint-is-lowest-breakpoint(nth($key, 2)), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) {
                        @content;
                    }
                } @else if flint-get-value("settings", "grid") == "fixed" {
                    @media ( min-width: flint-calc-breakpoint("alias", nth($key, 2), flint-get-index(nth($key, 2))) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // From $key-x breakpoint to $key-y breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [list : from key-x to key-y] : from $key-x breakpoint to $key-y
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string", 4) and nth($key, 1) == "from" and nth($key, 3) == "to" {

                @if flint-get-value("settings", "grid") == "fluid" {
                    @media ( min-width: (flint-calc-breakpoint("next", nth($key, 2), flint-get-index(nth($key, 2))) + if(flint-is-lowest-breakpoint(nth($key, 2)), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) and ( max-width: flint-calc-breakpoint("alias", nth($key, 4), flint-get-index(nth($key, 4))) ) {
                        @content;
                    }
                } @else if flint-get-value("settings", "grid") == "fixed" {
                     @media ( min-width: flint-calc-breakpoint("alias", nth($key, 2), flint-get-index(nth($key, 2))) ) and ( max-width: (flint-calc-breakpoint("prev", nth($key, 4), flint-get-index(nth($key, 4))) - if(flint-is-highest-breakpoint(nth($key, 4)), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1))) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // From $num-x to $num-y
            // -------------------------------------------------------------------------------
            // @param $key [list : from number to number] : arbitrary media query
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string" "number" "string" "number", 4) and nth($key, 1) == "from" and nth($key, 3) == "to" {
                // Make sure passed units match units used in config
                @if flint-get-config-unit() == unit(nth($key, 2)) and flint-get-config-unit() == unit(nth($key, 4)) {
                    @media ( min-width: nth($key, 2) ) and ( max-width: nth($key, 4) ) {
                        @content;
                    }
                // Throw error
                } @else {
                    @warn "Passed units [#{unit(nth($key, 2))}, #{unit(nth($key, 4))}] do not match the unit used in your config map: #{flint-get-config-unit()}";
                }

            // Greater than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [list : greater than key] : anything above $key breakpoint
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string", 3) and nth($key, 1) == "greater" and nth($key, 2) == "than" {

                @if flint-get-value("settings", "grid") == "fluid" {
                    @media ( min-width: (flint-calc-breakpoint("alias", nth($key, 3), flint-get-index(nth($key, 3))) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                        @content;
                    }
                } @else if flint-get-value("settings", "grid") == "fixed" {
                    @media ( min-width: flint-calc-breakpoint("prev", nth($key, 3), flint-get-index(nth($key, 3))) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // Greater than number
            // -------------------------------------------------------------------------------
            // @param $key [list : greater than number] : anything above number
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string" "string" "number", 3) and nth($key, 1) == "greater" and nth($key, 2) == "than" {

                @if flint-get-config-unit() == unit(nth($key, 3)) {
                    @media ( min-width: nth($key, 3) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 3))}] do not match the unit used in your config map: #{flint-get-config-unit()}";
                }

            // Number greater than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [list : number greater than key] : unit value greater than $key breakpoint
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "number" "string" "string" "string", 4) and nth($key, 2) == "greater" and nth($key, 3) == "than" {

                @if flint-get-config-unit() == unit(nth($key, 1)) {
                    @media ( min-width: (flint-calc-breakpoint("alias", nth($key, 4), flint-get-index(nth($key, 4))) + nth($key, 1)) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 1))}] do not match the unit used in your config map: #{flint-get-config-unit()}";
                }

            // Less than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [list : less than key] : anything below $key breakpoint
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string", 3) and nth($key, 1) == "less" and nth($key, 2) == "than" {

                @if flint-get-value("settings", "grid") == "fluid" {
                    @media ( max-width: flint-calc-breakpoint("next", nth($key, 3), flint-get-index(nth($key, 3))) ) {
                        @content;
                    }
                } @else if flint-get-value("settings", "grid") == "fixed" {
                    @media ( max-width: (flint-calc-breakpoint("alias", nth($key, 3), flint-get-index(nth($key, 3))) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1)) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // Less than number
            // -------------------------------------------------------------------------------
            // @param $key [list : less than number] : anything below number
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string" "string" "number", 3) and nth($key, 1) == "less" and nth($key, 2) == "than" {

                @if flint-get-config-unit() == unit(nth($key, 3)) {
                    @media ( max-width: nth($key, 3) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 3))}] do not match the unit used in your config map: #{flint-get-config-unit()}";
                }

            // Number less than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [list : number less than key] : unit value less than $key breakpoint
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "number" "string" "string" "string", 4) and nth($key, 2) == "less" and nth($key, 3) == "than" {

                @if flint-get-config-unit() == unit(nth($key, 1)) {
                    @media ( max-width: (flint-calc-breakpoint("alias", nth($key, 4), flint-get-index(nth($key, 4))) - nth($key, 1)) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 1))}] do not match the unit used in your config map: #{flint-get-config-unit()}";
                }

            // For $key-x $key-y $key-z
            // -------------------------------------------------------------------------------
            // @param $key [list : for list of keys] : comma delimited list of queries
            // -------------------------------------------------------------------------------
            } @else if flint-types-in-list($key, "string") and nth($key, 1) == "for" {
                // Define empty query list
                $query: ();

                // Build out comma delimited query list for each breakpoint
                // ----
                @for $i from 1 through length($key) {
                    $calc-key: nth($key, $i);

                    @if flint-exists($flint, $calc-key) {
                        @if flint-get-value("settings", "grid") == "fluid" {
                            @if flint-is-highest-breakpoint($calc-key) {
                                $query: append($query, unquote('( min-width: #{(flint-calc-breakpoint("next", $calc-key, flint-get-index($calc-key)) + if(flint-get-config-unit() == "em", flint-to-em(1px), 1))} )'), "comma");
                            } @else {
                                $query: append($query, unquote('( min-width: #{(flint-calc-breakpoint("next", $calc-key, flint-get-index($calc-key)) + if(flint-is-lowest-breakpoint($calc-key), 0, if(flint-get-config-unit() == "em", flint-to-em(1px), 1)))} ) and ( max-width: #{flint-calc-breakpoint("alias", $calc-key, flint-get-index($calc-key))} )'), "comma");
                            }
                        } @else if flint-get-value("settings", "grid") == "fixed" {
                            @if flint-is-highest-breakpoint($calc-key) {
                                $query: append($query, unquote('( min-width: #{flint-calc-breakpoint("alias", $calc-key, flint-get-index($calc-key))} )'), "comma");
                            } @else {
                                $query: append($query, unquote('( min-width: #{flint-calc-breakpoint("alias", $calc-key, flint-get-index($calc-key))} ) and ( max-width: #{(flint-calc-breakpoint("prev", $calc-key, flint-get-index($calc-key)) - if(flint-get-config-unit() == "em", flint-to-em(1px), 1))} )'), "comma");
                            }
                        } @else {
                            @warn "Invalid gutter settings in config map: #{flint-get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                        }
                    } @else {
                        @if not $calc-key == "for" {
                            @warn "Invalid argument: #{$calc-key}. Breakpoint does not exist. Please provide a valid argument.";
                        }
                    }
                }

                @media #{$query} {
                  @content;
                }
            }

        // Invalid argument
        // -------------------------------------------------------------------------------
        // @throw : invalid argument warning
        // -------------------------------------------------------------------------------
        } @else {
            @if $key != "clear"
                @warn "Invalid argument(s). Please double check and provide a valid argument. If you're calling by alias, please provide a single span argument for your breakpoint. See documentation for additional details.";
            }
        }
    }
}
