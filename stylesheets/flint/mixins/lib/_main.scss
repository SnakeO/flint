// Main API
// -------------------------------------------------------------------------------
// @param $key [string | number | list] : key of breakpoint [shorthand: span]
// @param $span [string | number | list] : value of span of column [shorthand: context]
// @param $context [number | list] : value of context of span
// @param $gutter [string | list] : alias for gutter modifier
// @param $shift [number | list] : value to shift column
// -------------------------------------------------------------------------------
// @output foundation styles | container styles | calculated styles

@mixin _(
    $key: null,
    $span: null,
    $context: null,
    $gutter: null,
    $shift: null
) {

    // Initial check to see what type of instance this is
    // -------------------------------------------------------------------------------
    // @param $key [string | number | list] : checks type of instance
    // -------------------------------------------------------------------------------
    // @output foundation styles | container styles | calculated styles

    // Foundation
    // ----
    @if $key == "foundation" {

        // Apply global border-box-sizing if set to true
        @if get-value("settings", "border-box-sizing") {
            $flint__foundation: "existant" !global;
        }

        // Foundation is now globally existant
        // ----
        @if $flint__foundation == "existant" {
            @at-root *, *:before, *:after {
                -moz-box-sizing: border-box;
                -webkit-box-sizing: border-box;
                box-sizing: border-box;
                @content;
            }
        }

    // Clearfix
    // ----
    } @else if $key == "clear" {

        @include clearfix();

    // Instance
    // ----
    } @else {

        @if $key == "container"
            or exists($flint, $key) and $span != null
            or types-in-list($span, "number") or type-of($span) == "number"
            or types-in-list($key, "number") or type-of($key) == "number"
        {

            // Only apply display rule if the key is either default or container
            @if is-default($key) or $key == "container" {

                display: block;

            // Only apply display rule to default breakpoint
            } @else if length($key) > 1 or is-not-string($key) {
                // Loop over all keys, set to default
                @for $i from 1 through length($flint__all__keys) {
                    $calcKey: steal-key($i);

                    @if is-default($calcKey) {
                        display: block;
                    }
                }
            }

            // Apply individually if foundation is not set globally, but is set to true in config
            @if get-value("settings", "border-box-sizing") and $flint__foundation == "nonexistant" {
                -moz-box-sizing: border-box;
                -webkit-box-sizing: border-box;
                box-sizing: border-box;

                // Warn to either set a global foundation, or turn border-box-sizing off
                @if global-variable-exists(global-foundation-is-set) == false {
                    @warn "Global foundation is #{$flint__foundation}. To avoid repeated box-sizing incidents, set a global _(foundation) rule, or turn border-box-sizing to false in your config file.";

                    // Declare global variable so only a single warning prints out
                    $global-foundation-is-set: true !global;
                }
            }

            // Container
            // -------------------------------------------------------------------------------
            // @param $key [string] : container instance
            // -------------------------------------------------------------------------------
            // @output container styles

            @if $key == "container" {
                float: none;

                // Fixed grid? Output container for each breakpoint
                // ----
                @if get-value("settings", "grid") == "fixed" {

                    @for $i from 1 through length($flint__all__keys) {

                        // Set up variables
                        $calcKey: steal-key($i);
                        $calcContainer: $key;

                        // Key is default, no media queries
                        @if is-default($calcKey) {

                            width: calc-width($calcKey, $calcContainer);
                            @content;

                        // Not default, wrap in media queries
                        } @else {

                            // Highest breakpoint? No max-width
                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    width: calc-width($calcKey, $calcContainer);
                                    @content;
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                    width: calc-width($calcKey, $calcContainer);
                                    @content;
                                }

                            }
                        }
                    }
                }

                // Check if max-width is set
                // ----
                @if get-value("settings", "max-width") {

                    // Check if it's an number
                    @if is-number(get-value("settings", "max-width")) {
                        max-width: get-value("settings", "max-width");
                    // Then use highest breakpoint
                    } @else {
                        max-width: max(get-all-breakpoints()...);
                    }

                }

                // Center container is set to true?
                // ----
                @if get-value("settings", "center-container") {
                    margin-right: auto;
                    margin-left: auto;
                } @else {
                    margin-right: 0;
                    margin-left: 0;
                }

            // Not container
            // ----
            } @else {

                // Make sure it's the default, output float
                @if is-default($key) {

                    float: unquote(get-value("settings", "float-style"));

                } @else if is-list($key) or is-not-string($key) {

                    @for $i from 1 through length($flint__all__keys) {
                        $calcKey: steal-key($i);

                        @if is-default($calcKey) {
                            float: unquote(get-value("settings", "float-style"));
                        }
                    }
                }
            }
        }

        // Recursive shorthand without context
        // -------------------------------------------------------------------------------
        // @param $span [number | null] : span value
        // -------------------------------------------------------------------------------
        // @output calculated styles

        @if is-number($key) and length($key) == 1 {

            @if $span == null {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                            @content;
                        }

                    } @else {

                        @if get-value("settings", "grid") == "fluid" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else if get-value("settings", "grid") == "fixed" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else {
                            @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                        }
                    }
                }

            // Recursive shorthand with identical context
            // -------------------------------------------------------------------------------
            // @param $key [number] : span value
            // @param $span [number] : context value of span
            // -------------------------------------------------------------------------------
            // @output calculated styles

            } @else if length($span) == 1 and is-number($span) or $span == "auto" {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                            @content;
                        }

                    } @else {

                        @if get-value("settings", "grid") == "fluid" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else if get-value("settings", "grid") == "fixed" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else {
                            @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                        }
                    }
                }

            // Recursive shorthand with differing context
            // -------------------------------------------------------------------------------
            // @param $key [number] : span value
            // @param $span [list] : context value of span for each breakpoint
            // -------------------------------------------------------------------------------
            // @output calculated styles

            } @else if types-in-list($span, "number") or $span == "auto" {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                            @content;
                        }

                    } @else {

                        @if get-value("settings", "grid") == "fluid" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else if get-value("settings", "grid") == "fixed" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            }

                        } @else {
                            @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                        }
                    }
                }
            }
        }

        // Variable shorthand
        // -------------------------------------------------------------------------------
        // @param $key [list] : span value for each breakpoint
        // -------------------------------------------------------------------------------
        // @output calculated styles

        @if types-in-list($key, "number") and $span == null {

            @for $i from 1 through length($flint__all__keys) {

                $calcKey: steal-key($i);
                $calcSpan: $key;
                $calcContext: $context;
                $calcGutter: $gutter;
                $calcShift: $shift;

                @if is-default($calcKey) {

                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                        @content;
                    }

                } @else {

                    @if get-value("settings", "grid") == "fluid" {

                        @if is-highest-breakpoint($calcKey) {

                            @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(get-config-unit() == "em", em(1px), 1)) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        } @else {

                            @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        }

                    } @else if get-value("settings", "grid") == "fixed" {

                        @if is-highest-breakpoint($calcKey) {

                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        } @else {

                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        }

                    } @else {
                        @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                    }
                }
            }

        // Variable shorthand with context
        // -------------------------------------------------------------------------------
        // @param $key [list] : span value for each breakpoint
        // @param $span [list] : context value for each breakpoint
        // -------------------------------------------------------------------------------
        // @output calculated styles

        } @else if types-in-list($key, "number") and types-in-list($span, "number") or $span == "auto" {

            @for $i from 1 through length($flint__all__keys) {

                $calcKey: steal-key($i);
                $calcSpan: $key;
                $calcContext: $span;
                $calcGutter: $gutter;
                $calcShift: $shift;

                @if is-default($calcKey) {

                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                        @content;
                    }

                } @else {

                    @if get-value("settings", "grid") == "fluid" {

                        @if is-highest-breakpoint($calcKey) {

                            @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(get-config-unit() == "em", em(1px), 1)) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        } @else {

                            @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        }

                    } @else if get-value("settings", "grid") == "fixed" {

                        @if is-highest-breakpoint($calcKey) {

                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        } @else {

                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                    @content;
                                }
                            }

                        }

                    } @else {
                        @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                    }
                }
            }

        // Call by alias
        // -------------------------------------------------------------------------------
        // @param $key [string] : breakpoint alias
        // @param $span [number] : span value
        // -------------------------------------------------------------------------------
        // @output calculated styles

        } @else if exists($flint, $key) and is-number($span) and $context == null {

            $calcKey: $key;
            $calcSpan: $span;
            $calcContext: $context;
            $calcGutter: $gutter;
            $calcShift: $shift;

            @if is-default($calcKey) {

                @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                    @content;
                }

            } @else {

                @if get-value("settings", "grid") == "fluid" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(get-config-unit() == "em", em(1px), 1)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    }

                } @else if get-value("settings", "grid") == "fixed" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) and ( max-width: (calc-breakpoint("prev", $calcKey, get-index($calcKey)) - if(get-config-unit() == "em", em(1px), 1)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    }

                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }
            }

        // Call by alias with context
        // -------------------------------------------------------------------------------
        // @param $key [string] : breakpoint alias
        // @param $span [number] : span value
        // @param $context [number] : context value of span
        // -------------------------------------------------------------------------------
        // @output calculated styles

        } @else if exists($flint, $key) and is-number($span) and is-number($context) or $context == "auto" {

            $calcKey: $key;
            $calcSpan: $span;
            $calcContext: $context;
            $calcGutter: $gutter;
            $calcShift: $shift;

            @if is-default($calcKey) {

                @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                    @content;
                }

            } @else {

                @if get-value("settings", "grid") == "fluid" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(get-config-unit() == "em", em(1px), 1)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    }

                } @else if get-value("settings", "grid") == "fixed" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) and ( max-width: (calc-breakpoint("prev", $calcKey, get-index($calcKey)) - if(get-config-unit() == "em", em(1px), 1)) ) {
                            @include calcFlint($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                                @content;
                            }
                        }

                    }

                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }
            }

        // Wrap @content in media queries
        // -------------------------------------------------------------------------------
        // @param $key [list] : defines how to make up media query
        // -------------------------------------------------------------------------------
        // @output styles wrapped in media query

        } @else if exists($flint, $key) or is-list($key) and $span == null and $context == null {

            // Call $key breakpoint by alias
            // -------------------------------------------------------------------------------
            // @param $key [string] : only for $key breakpoint
            // -------------------------------------------------------------------------------

            @if length($key) == 1 {

                @if get-value("settings", "grid") == "fluid" {
                    @if is-highest-breakpoint($key) {
                        @media only screen and ( min-width: (calc-breakpoint("next", $key, get-index($key)) + if(get-config-unit() == "em", em(1px), 1)) ) {
                            @content;
                        }
                    } @else {
                        @media only screen and ( min-width: (calc-breakpoint("next", $key, get-index($key)) + if(is-lowest-breakpoint($key), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $key, get-index($key)) ) {
                            @content;
                        }
                    }
                } @else if get-value("settings", "grid") == "fixed" {
                    @if is-highest-breakpoint($key) {
                        @media only screen and ( min-width: calc-breakpoint("alias", $key, get-index($key)) ) {
                            @content;
                        }
                    } @else {
                        @media only screen and ( min-width: calc-breakpoint("alias", $key, get-index($key)) ) and ( max-width: (calc-breakpoint("prev", $key, get-index($key)) - 1) ) {
                            @content;
                        }
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // From $key breakpoint to infinity
            // -------------------------------------------------------------------------------
            // @param $key [from key to infinity] : min-width from $key breakpoint
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string", 4) and nth($key, 1) == "from" and nth($key, 3) == "to" and nth($key, 4) == "infinity" {

                @if get-value("settings", "grid") == "fluid" {
                    @media only screen and ( min-width: (calc-breakpoint("next", nth($key, 2), get-index(nth($key, 2))) + if(is-lowest-breakpoint(nth($key, 2)), 0, if(get-config-unit() == "em", em(1px), 1))) ) {
                        @content;
                    }
                } @else if get-value("settings", "grid") == "fixed" {
                    @media only screen and ( min-width: calc-breakpoint("alias", nth($key, 2), get-index(nth($key, 2))) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // From $key-x breakpoint to $key-y breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [from key-x to key-y] : from $key-x breakpoint to $key-y
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string", 4) and nth($key, 1) == "from" and nth($key, 3) == "to" {

                @if get-value("settings", "grid") == "fluid" {
                    @media only screen and ( min-width: (calc-breakpoint("next", nth($key, 2), get-index(nth($key, 2))) + if(is-lowest-breakpoint(nth($key, 2)), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", nth($key, 4), get-index(nth($key, 4))) ) {
                        @content;
                    }
                } @else if get-value("settings", "grid") == "fixed" {
                     @media only screen and ( min-width: calc-breakpoint("alias", nth($key, 2), get-index(nth($key, 2))) ) and ( max-width: (calc-breakpoint("prev", nth($key, 4), get-index(nth($key, 4))) - if(is-highest-breakpoint(nth($key, 4)), 0, if(get-config-unit() == "em", em(1px), 1))) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // From $num-x to $num-y
            // -------------------------------------------------------------------------------
            // @param $key [from number to number] : arbitrary media query
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string" "number" "string" "number", 4) and nth($key, 1) == "from" and nth($key, 3) == "to" {
                // Make sure passed units match units used in config
                @if get-config-unit() == unit(nth($key, 2)) and get-config-unit() == unit(nth($key, 4)) {
                    @media only screen and ( min-width: nth($key, 2) ) and ( max-width: nth($key, 4) ) {
                        @content;
                    }
                // Throw error
                } @else {
                    @warn "Passed units [#{unit(nth($key, 2))}, #{unit(nth($key, 4))}] do not match the unit used in your config map: #{get-config-unit()}";
                }

            // Greater than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [greater than key] : anything above $key breakpoint
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string", 3) and nth($key, 1) == "greater" and nth($key, 2) == "than" {

                @if get-value("settings", "grid") == "fluid" {
                    @media only screen and ( min-width: (calc-breakpoint("alias", nth($key, 3), get-index(nth($key, 3))) + if(get-config-unit() == "em", em(1px), 1)) ) {
                        @content;
                    }
                } @else if get-value("settings", "grid") == "fixed" {
                    @media only screen and ( min-width: calc-breakpoint("prev", nth($key, 3), get-index(nth($key, 3))) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // Greater than number
            // -------------------------------------------------------------------------------
            // @param $key [greater than number] : anything above number
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string" "string" "number", 3) and nth($key, 1) == "greater" and nth($key, 2) == "than" {

                @if get-config-unit() == unit(nth($key, 3)) {
                    @media only screen and ( min-width: nth($key, 3) + if(get-config-unit() == "em", em(1px), 1) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 3))}] do not match the unit used in your config map: #{get-config-unit()}";
                }

            // Number greater than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [number greater than key] : unit value greater than $key breakpoint
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "number" "string" "string" "string", 4) and nth($key, 2) == "greater" and nth($key, 3) == "than" {

                @if get-config-unit() == unit(nth($key, 1)) {
                    @media only screen and ( min-width: (calc-breakpoint("alias", nth($key, 4), get-index(nth($key, 4))) + nth($key, 1)) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 1))}] do not match the unit used in your config map: #{get-config-unit()}";
                }

            // Less than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [less than key] : anything below $key breakpoint
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string", 3) and nth($key, 1) == "less" and nth($key, 2) == "than" {

                @if get-value("settings", "grid") == "fluid" {
                    @media only screen and ( max-width: calc-breakpoint("next", nth($key, 3), get-index(nth($key, 3))) ) {
                        @content;
                    }
                } @else if get-value("settings", "grid") == "fixed" {
                    @media only screen and ( max-width: (calc-breakpoint("alias", nth($key, 3), get-index(nth($key, 3))) - if(get-config-unit() == "em", em(1px), 1)) ) {
                        @content;
                    }
                } @else {
                    @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                }

            // Less than number
            // -------------------------------------------------------------------------------
            // @param $key [less than number] : anything below number
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string" "string" "number", 3) and nth($key, 1) == "less" and nth($key, 2) == "than" {

                @if get-config-unit() == unit(nth($key, 3)) {
                    @media only screen and ( max-width: nth($key, 3) - if(get-config-unit() == "em", em(1px), 1) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 3))}] do not match the unit used in your config map: #{get-config-unit()}";
                }

            // Number less than $key breakpoint
            // -------------------------------------------------------------------------------
            // @param $key [number less than key] : unit value less than $key breakpoint
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "number" "string" "string" "string", 4) and nth($key, 2) == "less" and nth($key, 3) == "than" {

                @if get-config-unit() == unit(nth($key, 1)) {
                    @media only screen and ( max-width: (calc-breakpoint("alias", nth($key, 4), get-index(nth($key, 4))) - nth($key, 1)) ) {
                        @content;
                    }
                } @else {
                    @warn "Passed units [#{unit(nth($key, 1))}] do not match the unit used in your config map: #{get-config-unit()}";
                }

            // For $key-x $key-y $key-z
            // -------------------------------------------------------------------------------
            // @param $key [for list of strings] : will duplicate styles for each passed $key breakpoint
            // -------------------------------------------------------------------------------

            } @else if types-in-list($key, "string") and nth($key, 1) == "for" {

                @for $i from 1 through length($key) {
                    $calcKey: nth($key, $i);

                    @if exists($flint, $calcKey) {
                        @if get-value("settings", "grid") == "fluid" {
                            @if is-highest-breakpoint($calcKey) {
                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @content;
                                }
                            } @else {
                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(is-lowest-breakpoint($calcKey), 0, if(get-config-unit() == "em", em(1px), 1))) ) and ( max-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                                    @content;
                                }
                            }
                        } @else if get-value("settings", "grid") == "fixed" {
                            @if is-highest-breakpoint($calcKey) {
                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                                    @content;
                                }
                            } @else {
                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) and ( max-width: (calc-breakpoint("prev", $calcKey, get-index($calcKey)) - if(get-config-unit() == "em", em(1px), 1)) ) {
                                    @content;
                                }
                            }
                        } @else {
                            @warn "Invalid gutter settings in config map: #{get-value('settings', 'grid')}. Valid arguments: fluid | fixed";
                        }
                    }
                }
            }
        }
    }
}
