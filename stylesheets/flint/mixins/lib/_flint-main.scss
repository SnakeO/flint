@mixin _(
    $key: null,
    $span: null,
    $context: null,
    $gutter: null,
    $shift: null
) {

    // Initial check to see what type of instance this is
    // -------------------------------------------------------------------------------
    // @param $key [string | integer | list] : checks type of instance
    // -------------------------------------------------------------------------------
    // @output foundation styles | container styles | calculated styles

    @if $key == "foundation" {

        // apply global border-box-sizing if true
        @if get-value("settings", "border-box-sizing") {
            $flint__foundation: "existant" !global;
        }
        
        // foundation is now globally existant
        @if $flint__foundation == "existant" {
            @at-root *, *:before, *:after {
                -moz-box-sizing: border-box;
                -webkit-box-sizing: border-box;
                box-sizing: border-box;
                @content;
            }
        }

    } @else if $key == "clear" {

        @include clearfix();

    } @else if 
        $key == "container"
        or exists($flint, $key) and $span != null
        or length($key) == 1 and exists($flint, $key) == false
        or is-list($span)
        or is-list($key) and is-not-string(nth($key, 1)) and is-not-string(nth($key, 2))
    {

        // only apply display rule if the key is the default
        @if is-default($key) or $key == "container" {

            display: block;

        } @else if length($key) > 1 or is-not-string($key) {

            @for $i from 1 through length($flint__all__keys) {
                $calcKey: steal-key($i);

                @if is-default($calcKey) {
                    display: block;
                }
            }
        }
        
        // apply individually if foundation is not set globally, but is set to true in config
        @if get-value("settings", "border-box-sizing") and $flint__foundation == "nonexistant" {
            -moz-box-sizing: border-box;
            -webkit-box-sizing: border-box;
            box-sizing: border-box;

            // warn to either set a global foundation, or turn border-box-sizing off
            @if global-variable-exists(global-foundation-is-set) == false {
                @warn "Global foundation is #{$flint__foundation}. To avoid repeated box-sizing incidents, set a global flint(foundation) rule, or turn border-box-sizing to false in your config file.";

                // declare global variable so only a single warning prints out
                $global-foundation-is-set: true !global;
            }
        }

        // check if center container is set to true
        @if $key == "container" {
            float: none;

            // check if max-width is set
            @if get-value("settings", "max-width") {
                max-width: max(get-all-breakpoints()...);
            // check if it's an integer
            } @else if is-number(get-value("settings", "max-width")) {
                max-width: get-value("settings", "max-width");
            }

            @if get-value("settings", "center-container") {
                margin-right: auto;
                margin-left: auto;
            } @else {
                margin-right: 0;
                margin-left: 0;
            }

        } @else {

            @if is-default($key) {

                float: unquote(get-value("settings", "float-style"));

            } @else if is-list($key) or is-not-string($key) {

                @for $i from 1 through length($flint__all__keys) {
                    $calcKey: steal-key($i);

                    @if is-default($calcKey) {
                        float: unquote(get-value("settings", "float-style"));
                    }
                }
            }
        }
    }

    // Recursive shorthand without context
    // -------------------------------------------------------------------------------
    // @param $span [integer] : span value
    // -------------------------------------------------------------------------------
    // @output calculated styles

    @if is-number($key) and length($key) == 1 or $key == "container" {

        @if $key == "container" {

            @if get-value("settings", "grid") == "fixed" {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        width: calc-width($calcKey, $calcSpan);
                        @content;

                    } @else {

                        @if is-highest-breakpoint($calcKey) {

                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                width: calc-width($calcKey, $calcSpan);
                                @content;
                            }

                        } @else {

                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - 1) ) {
                                width: calc-width($calcKey, $calcSpan);
                                @content;
                            }

                        }
                    }
                }
            }

        } @else {

            @if length($key) == 1 and $span == null {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                            @content;
                        }

                    } @else {

                        @if get-value("settings", "grid") == "fluid" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + 1) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }
                                
                            }

                        } @else if get-value("settings", "grid") == "fixed" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - 1) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }
                                
                            }
                            
                        }
                    }
                }

            // Recursive shorthand with identical context
            // -------------------------------------------------------------------------------
            // @param $span [integer] : span value
            // @param $context [Value] : context value of span
            // -------------------------------------------------------------------------------
            // @output calculated styles

            } @else if length($key) == 1 and length($span) == 1 {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                            @content;
                        }

                    } @else {

                        @if get-value("settings", "grid") == "fluid" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + 1) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }
                                
                            }

                        } @else if get-value("settings", "grid") == "fixed" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - 1) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }
                                
                            }
                            
                        }
                    }
                }

            // Recursive shorthand with differing context
            // -------------------------------------------------------------------------------
            // @param $span [integer] : span value
            // @param $context [list] : context value of span for each breakpoint
            // -------------------------------------------------------------------------------
            // @output calculated styles

            } @else if length($key) == 1 and is-list($span) {

                @for $i from 1 through length($flint__all__keys) {

                    $calcKey: steal-key($i);
                    $calcSpan: $key;
                    $calcContext: $span;
                    $calcGutter: $gutter;
                    $calcShift: $shift;

                    @if is-default($calcKey) {

                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                            @content;
                        }

                    } @else {

                        @if get-value("settings", "grid") == "fluid" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + 1) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }
                                
                            }

                        } @else if get-value("settings", "grid") == "fixed" {

                            @if is-highest-breakpoint($calcKey) {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }

                            } @else {

                                @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - 1) ) {
                                    @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                        @content;
                                    }
                                }
                                
                            }
                            
                        }
                    }
                }
            }
        }
    }

    // Variable shorthand
    // -------------------------------------------------------------------------------
    // @param $span [list] : span value for each breakpoint
    // -------------------------------------------------------------------------------
    // @output calculated styles

    @if
        is-list($key)
        and $span == null
        and is-not-string(nth($key, 1))
        and is-not-string(nth($key, 2))
    {
        @for $i from 1 through length($flint__all__keys) {

            $calcKey: steal-key($i);
            $calcSpan: $key;
            $calcContext: $context;
            $calcGutter: $gutter;
            $calcShift: $shift;

            @if is-default($calcKey) {

                @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                    @content;
                }

            } @else {

                @if get-value("settings", "grid") == "fluid" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + 1) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }
                        
                    }

                } @else if get-value("settings", "grid") == "fixed" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - 1) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }
                        
                    }
                    
                }
            }
        }

    // Variable shorthand with context
    // -------------------------------------------------------------------------------
    // @param $span [list] : span value for each breakpoint 
    // @param $context [list] : context value for each breakpoint
    // -------------------------------------------------------------------------------
    // @output calculated styles

    } @else if
        is-list($key)
        and length($span) >= 1
        and is-not-string(nth($key, 1))
        and is-not-string(nth($key, 2))
    {
        @for $i from 1 through length($flint__all__keys) {

            $calcKey: steal-key($i);
            $calcSpan: $key;
            $calcContext: $span;
            $calcGutter: $gutter;
            $calcShift: $shift;

            @if is-default($calcKey) {

                @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                    @content;
                }

            } @else {

                @if get-value("settings", "grid") == "fluid" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + 1) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, $i) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, $i) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }
                        
                    }

                } @else if get-value("settings", "grid") == "fixed" {

                    @if is-highest-breakpoint($calcKey) {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }

                    } @else {

                        @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, $i) ) and ( max-width: (calc-breakpoint("prev", $calcKey, $i) - 1) ) {
                            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift, $i) {
                                @content;
                            }
                        }
                        
                    }
                    
                }
            }
        }

    // Call by alias
    // -------------------------------------------------------------------------------
    // @param $key [string] : breakpoint alias
    // @param $span [integer] : span value
    // -------------------------------------------------------------------------------
    // @output calculated styles

    } @else if exists($flint, $key) and $span != null and $context == null { 

        $calcKey: $key;
        $calcSpan: $span;
        $calcContext: $context;
        $calcGutter: $gutter;
        $calcShift: $shift;

        @if is-default($calcKey) {

            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                @content;
            }

        } @else {

            @if get-value("settings", "grid") == "fluid" {

                @if is-highest-breakpoint($calcKey) {

                    @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + 1) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }

                } @else {

                    @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }
                    
                }

            } @else if get-value("settings", "grid") == "fixed" {

                @if is-highest-breakpoint($calcKey) {

                    @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }

                } @else {

                    @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) and ( max-width: (calc-breakpoint("prev", $calcKey, get-index($calcKey)) - 1) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }
                    
                }
                
            }
        }

    // Call by alias with context
    // -------------------------------------------------------------------------------
    // @param $key [string] : breakpoint alias
    // @param $span [integer] : span value
    // @param $context [integer] : context value of span
    // -------------------------------------------------------------------------------
    // @output calculated styles

    } @else if exists($flint, $key) and $span != null and $context != null {
      
        $calcKey: $key;
        $calcSpan: $span;
        $calcContext: $context;
        $calcGutter: $gutter;
        $calcShift: $shift;

        @if is-default($calcKey) {

            @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                @content;
            }

        } @else {

            @if get-value("settings", "grid") == "fluid" {

                @if is-highest-breakpoint($calcKey) {

                    @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + 1) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }

                } @else {

                    @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }
                    
                }

            } @else if get-value("settings", "grid") == "fixed" {

                @if is-highest-breakpoint($calcKey) {

                    @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }

                } @else {

                    @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) and ( max-width: (calc-breakpoint("prev", $calcKey, get-index($calcKey)) - 1) ) {
                        @include calcFlint ($calcKey, $calcSpan, $calcContext, $calcGutter, $calcShift) {
                            @content;
                        }
                    }
                    
                }

            }
        }

    // Wrap @content in media queries
    // -------------------------------------------------------------------------------
    // @param $key [list of strings] : defines how to make up media query 
    // -------------------------------------------------------------------------------
    // @output styles wrapped in media query

    } @else if exists($flint, $key) and $span == null and $context == null or is-list($key) {

        // Call $key breakpoint by alias
        // -------------------------------------------------------------------------------
        // @param $key [$key] : only for $key breakpoint
        // -------------------------------------------------------------------------------

        @if length($key) == 1 {
            @if get-value("settings", "grid") == "fluid" {
                @if is-highest-breakpoint($key) {
                    @media only screen and ( min-width: (calc-breakpoint("next", $key, get-index($key)) + 1) ) {
                        @content;
                    }
                } @else {
                    @media only screen and ( min-width: (calc-breakpoint("next", $key, get-index($key)) + if(is-lowest-breakpoint($key), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $key, get-index($key)) ) {
                        @content;
                    }
                }
            } @else if get-value("settings", "grid") == "fixed" {
                @if is-highest-breakpoint($key) {
                    @media only screen and ( min-width: calc-breakpoint("alias", $key, get-index($key)) ) {
                        @content;
                    }
                } @else {
                    @media only screen and ( min-width: calc-breakpoint("alias", $key, get-index($key)) ) and ( max-width: (calc-breakpoint("prev", $key, get-index($key)) - 1) ) {
                        @content;
                    }
                }
            }

        // From $key breakpoint to infinity
        // -------------------------------------------------------------------------------
        // @param $key [from $key to infinity] : min-width from $key breakpoint
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 1) == "from" and nth($key, 3) == "to" and nth($key, 4) == "infinity" {
            @if get-value("settings", "grid") == "fluid" {
                @media only screen and ( min-width: (calc-breakpoint("next", nth($key, 2), get-index(nth($key, 2))) + if(is-lowest-breakpoint(nth($key, 2)), 0, 1)) ) {
                    @content;
                }
            } @else if get-value("settings", "grid") == "fixed" {
                @media only screen and ( min-width: calc-breakpoint("alias", nth($key, 2), get-index(nth($key, 2))) ) {
                    @content;
                }
            }

        // From $key-x breakpoint to $key-y breakpoint
        // -------------------------------------------------------------------------------
        // @param $key [from $key-x to $key-y] : from $key-x breakpoint to $key-y
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 1) == "from" and nth($key, 3) == "to" {
            @if get-value("settings", "grid") == "fluid" {
                @media only screen and ( min-width: (calc-breakpoint("next", nth($key, 2), get-index(nth($key, 2))) + if(is-lowest-breakpoint(nth($key, 2)), 0, 1)) ) and ( max-width: calc-breakpoint("alias", nth($key, 4), get-index(nth($key, 4))) ) {
                    @content;
                }
            } @else if get-value("settings", "grid") == "fixed" {
                 @media only screen and ( min-width: calc-breakpoint("alias", nth($key, 2), get-index(nth($key, 2))) ) and ( max-width: (calc-breakpoint("prev", nth($key, 4), get-index(nth($key, 4))) - if(is-highest-breakpoint(nth($key, 4)), 0, 1)) ) {
                    @content;
                }
            }

        // Greater than $key breakpoint
        // -------------------------------------------------------------------------------
        // @param $key [greater than $key] : anything above $key breakpoint
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 1) == "greater" and nth($key, 2) == "than" {
            @if get-value("settings", "grid") == "fluid" {
                @media only screen and ( min-width: (calc-breakpoint("alias", nth($key, 3), get-index(nth($key, 3))) + 1) ) {
                    @content;
                }
            } @else if get-value("settings", "grid") == "fixed" {
                @media only screen and ( min-width: calc-breakpoint("prev", nth($key, 3), get-index(nth($key, 3))) ) {
                    @content;
                }
            }

        // x[unit] greater than $key breakpoint
        // -------------------------------------------------------------------------------
        // @param $key [x greater than $key] : unit value greater than $key breakpoint
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 2) == "greater" and nth($key, 3) == "than" {
            @media only screen and ( min-width: (calc-breakpoint("alias", nth($key, 4), get-index(nth($key, 4))) + nth($key, 1)) ) {
                @content;
            }

        // Less than $key breakpoint
        // -------------------------------------------------------------------------------
        // @param $key [less than $key] : anything below $key breakpoint
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 1) == "less" and nth($key, 2) == "than" {
            @if get-value("settings", "grid") == "fluid" {
                @media only screen and ( max-width: calc-breakpoint("next", nth($key, 3), get-index(nth($key, 3))) ) {
                    @content;
                }
            } @else if get-value("settings", "grid") == "fixed" {
                @media only screen and ( max-width: (calc-breakpoint("alias", nth($key, 3), get-index(nth($key, 3))) - 1) ) {
                    @content;
                }
            }

        // x[unit] less than $key breakpoint
        // -------------------------------------------------------------------------------
        // @param $key [x less than than $key] : unit value less than $key breakpoint
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 2) == "less" and nth($key, 3) == "than" {
            @media only screen and ( max-width: (calc-breakpoint("alias", nth($key, 4), get-index(nth($key, 4))) - nth($key, 1)) ) {
                @content;
            }

        // For $key-x $key-y $key-z
        // -------------------------------------------------------------------------------
        // @param $key [for list of strings] : will duplicate styles for each passed $key breakpoint
        // -------------------------------------------------------------------------------

        } @else if length($key) > 1 and nth($key, 1) == "for" {
            @for $i from 1 through length($key) {
                $calcKey: nth($key, $i);

                @if exists($flint, $calcKey) {
                    @if get-value("settings", "grid") == "fluid" {
                        @if is-highest-breakpoint($calcKey) {
                            @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + 1) ) {
                                @content;
                            }
                        } @else {
                            @media only screen and ( min-width: (calc-breakpoint("next", $calcKey, get-index($calcKey)) + if(is-lowest-breakpoint($calcKey), 0, 1)) ) and ( max-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                                @content;
                            }
                        }
                    } @else if get-value("settings", "grid") == "fixed" {
                        @if is-highest-breakpoint($calcKey) {
                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) {
                                @content;
                            }
                        } @else {
                            @media only screen and ( min-width: calc-breakpoint("alias", $calcKey, get-index($calcKey)) ) and ( max-width: (calc-breakpoint("prev", $calcKey, get-index($calcKey)) - 1) ) {
                                @content;
                            }
                        }
                    }
                }
            }
        }
    }
}
